#include <catch.hpp>

#include <solution.hpp>

TEST_CASE("Simple") {
  struct TestCase {
    std::vector<std::vector<char>> board;
    int expected;
  };

  std::vector<TestCase> test_cases{
      {
          .board{{'.', '.', '.', '.', '.', '.', '.', '.'},
                 {'.', '.', '.', 'p', '.', '.', '.', '.'},
                 {'.', '.', '.', 'R', '.', '.', '.', 'p'},
                 {'.', '.', '.', '.', '.', '.', '.', '.'},
                 {'.', '.', '.', '.', '.', '.', '.', '.'},
                 {'.', '.', '.', 'p', '.', '.', '.', '.'},
                 {'.', '.', '.', '.', '.', '.', '.', '.'},
                 {'.', '.', '.', '.', '.', '.', '.', '.'}},
          .expected = 3,
      },
      {
          .board{{'.', '.', '.', '.', '.', '.', '.', '.'},
                 {'.', 'p', 'p', 'p', 'p', 'p', '.', '.'},
                 {'.', 'p', 'p', 'B', 'p', 'p', '.', '.'},
                 {'.', 'p', 'B', 'R', 'B', 'p', '.', '.'},
                 {'.', 'p', 'p', 'B', 'p', 'p', '.', '.'},
                 {'.', 'p', 'p', 'p', 'p', 'p', '.', '.'},
                 {'.', '.', '.', '.', '.', '.', '.', '.'},
                 {'.', '.', '.', '.', '.', '.', '.', '.'}},
          .expected = 0,
      },
      {
          .board{{'.', '.', '.', '.', '.', '.', '.', '.'},
                 {'.', '.', '.', 'p', '.', '.', '.', '.'},
                 {'.', '.', '.', 'p', '.', '.', '.', '.'},
                 {'p', 'p', '.', 'R', '.', 'p', 'B', '.'},
                 {'.', '.', '.', '.', '.', '.', '.', '.'},
                 {'.', '.', '.', 'B', '.', '.', '.', '.'},
                 {'.', '.', '.', 'p', '.', '.', '.', '.'},
                 {'.', '.', '.', '.', '.', '.', '.', '.'}},
          .expected = 3,
      },
  };

  for (const auto &[board, expected] : test_cases) {
    const auto actual = Solution::numRookCaptures(board);
    REQUIRE(expected == actual);
  }
}
