[
    {
        "ID": "1",
        "Title": "Two Sum",
        "Slug": "two-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "2",
        "Title": "Add Two Numbers",
        "Slug": "add-two-numbers",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Math",
            "Recursion"
        ],
        "Space": "O(1)",
        "Time": "O(n+m)",
        "Notes": ""
    },
    {
        "ID": "3",
        "Title": "Longest Substring Without Repeating Characters",
        "Slug": "longest-substring-without-repeating-characters",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "4",
        "Title": "Median of Two Sorted Arrays",
        "Slug": "median-of-two-sorted-arrays",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Divide and Conquer"
        ],
        "Space": "O(1)",
        "Time": "O(log&nbsp;min(n,m))",
        "Notes": ""
    },
    {
        "ID": "5",
        "Title": "Longest Palindromic Substring",
        "Slug": "longest-palindromic-substring",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": "[Manacher Algorithm](https://cp-algorithms.com/string/manacher.html)"
    },
    {
        "ID": "6",
        "Title": "Zigzag Conversion",
        "Slug": "zigzag-conversion",
        "Difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "7",
        "Title": "Reverse Integer",
        "Slug": "reverse-integer",
        "Difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "Space": "O(1)",
        "Time": "O(log&nbsp;n)",
        "Notes": ""
    },
    {
        "ID": "8",
        "Title": "String to Integer (atoi)",
        "Slug": "string-to-integer-atoi",
        "Difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "9",
        "Title": "Palindrome Number",
        "Slug": "palindrome-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "O(log&nbsp;n)",
        "Time": "O(log&nbsp;n)",
        "Notes": ""
    },
    {
        "ID": "10",
        "Title": "Regular Expression Matching",
        "Slug": "regular-expression-matching",
        "Difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Recursion"
        ],
        "Space": "O(nm)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "11",
        "Title": "Container With Most Water",
        "Slug": "container-with-most-water",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "12",
        "Title": "Integer to Roman",
        "Slug": "integer-to-roman",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "String"
        ],
        "Space": "O(1)",
        "Time": "O(1)",
        "Notes": ""
    },
    {
        "ID": "13",
        "Title": "Roman to Integer",
        "Slug": "roman-to-integer",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math",
            "String"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "14",
        "Title": "Longest Common Prefix",
        "Slug": "longest-common-prefix",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Trie"
        ],
        "Space": "O(1)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "15",
        "Title": "3Sum",
        "Slug": "3sum",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "O(n)",
        "Time": "O(n<sup>2</sup>)",
        "Notes": ""
    },
    {
        "ID": "16",
        "Title": "3Sum Closest",
        "Slug": "3sum-closest",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "O(n)",
        "Time": "O(n<sup>2</sup>)",
        "Notes": ""
    },
    {
        "ID": "17",
        "Title": "Letter Combinations of a Phone Number",
        "Slug": "letter-combinations-of-a-phone-number",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Backtracking"
        ],
        "Space": "O(n)",
        "Time": "O(n4<sup>n</sup>)",
        "Notes": ""
    },
    {
        "ID": "18",
        "Title": "4Sum",
        "Slug": "4sum",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "O(n)",
        "Time": "O(n<sup>3</sup>)",
        "Notes": ""
    },
    {
        "ID": "19",
        "Title": "Remove Nth Node From End of List",
        "Slug": "remove-nth-node-from-end-of-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "20",
        "Title": "Valid Parentheses",
        "Slug": "valid-parentheses",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Stack"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "21",
        "Title": "Merge Two Sorted Lists",
        "Slug": "merge-two-sorted-lists",
        "Difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Recursion"
        ],
        "Space": "O(1)",
        "Time": "O(n+m)",
        "Notes": ""
    },
    {
        "ID": "22",
        "Title": "Generate Parentheses",
        "Slug": "generate-parentheses",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Backtracking"
        ],
        "Space": "O(n)",
        "Time": "O(n4<sup>n</sup>)",
        "Notes": ""
    },
    {
        "ID": "23",
        "Title": "Merge k Sorted Lists",
        "Slug": "merge-k-sorted-lists",
        "Difficulty": "Hard",
        "Tags": [
            "Linked List",
            "Divide and Conquer",
            "Heap (Priority Queue)",
            "Merge Sort"
        ],
        "Space": "O(k)",
        "Time": "O(n&nbsp;log&nbsp;k)",
        "Notes": ""
    },
    {
        "ID": "24",
        "Title": "Swap Nodes in Pairs",
        "Slug": "swap-nodes-in-pairs",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Recursion"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "25",
        "Title": "Reverse Nodes in k-Group",
        "Slug": "reverse-nodes-in-k-group",
        "Difficulty": "Hard",
        "Tags": [
            "Linked List",
            "Recursion"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "26",
        "Title": "Remove Duplicates from Sorted Array",
        "Slug": "remove-duplicates-from-sorted-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "27",
        "Title": "Remove Element",
        "Slug": "remove-element",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "28",
        "Title": "Find the Index of the First Occurrence in a String",
        "Slug": "find-the-index-of-the-first-occurrence-in-a-string",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String",
            "String Matching"
        ],
        "Space": "O(m)",
        "Time": "O(n+m)",
        "Notes": "[KMP](https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm)"
    },
    {
        "ID": "30",
        "Title": "Substring with Concatenation of All Words",
        "Slug": "substring-with-concatenation-of-all-words",
        "Difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "Space": "O(mk)",
        "Time": "O(nmk)",
        "Notes": ""
    },
    {
        "ID": "31",
        "Title": "Next Permutation",
        "Slug": "next-permutation",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "32",
        "Title": "Longest Valid Parentheses",
        "Slug": "longest-valid-parentheses",
        "Difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Stack"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "33",
        "Title": "Search in Rotated Sorted Array",
        "Slug": "search-in-rotated-sorted-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "O(1)",
        "Time": "O(log&nbsp;n)",
        "Notes": ""
    },
    {
        "ID": "34",
        "Title": "Find First and Last Position of Element in Sorted Array",
        "Slug": "find-first-and-last-position-of-element-in-sorted-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "O(1)",
        "Time": "O(log&nbsp;n)",
        "Notes": ""
    },
    {
        "ID": "35",
        "Title": "Search Insert Position",
        "Slug": "search-insert-position",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "O(1)",
        "Time": "O(log&nbsp;n)",
        "Notes": ""
    },
    {
        "ID": "36",
        "Title": "Valid Sudoku",
        "Slug": "valid-sudoku",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "Space": "O(n)",
        "Time": "O(n<sup>2</sup>)",
        "Notes": ""
    },
    {
        "ID": "37",
        "Title": "Sudoku Solver",
        "Slug": "sudoku-solver",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Backtracking",
            "Matrix"
        ],
        "Space": "O(1)",
        "Time": "O(n<sup>2n<sup>2</sup></sup>)",
        "Notes": ""
    },
    {
        "ID": "38",
        "Title": "Count and Say",
        "Slug": "count-and-say",
        "Difficulty": "Medium",
        "Tags": [
            "String"
        ],
        "Space": "O(&lambda;<sup>n</sup>)",
        "Time": "O(&lambda;<sup>n</sup>)",
        "Notes": "[Look&Say](https://en.wikipedia.org/wiki/Look-and-say_sequence)"
    },
    {
        "ID": "39",
        "Title": "Combination Sum",
        "Slug": "combination-sum",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "Space": "O(t)",
        "Time": "O(n<sup>t</sup>)",
        "Notes": ""
    },
    {
        "ID": "40",
        "Title": "Combination Sum II",
        "Slug": "combination-sum-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "Space": "O(n)",
        "Time": "O(n2<sup>n</sup>)",
        "Notes": ""
    },
    {
        "ID": "41",
        "Title": "First Missing Positive",
        "Slug": "first-missing-positive",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "42",
        "Title": "Trapping Rain Water",
        "Slug": "trapping-rain-water",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Dynamic Programming",
            "Stack",
            "Monotonic Stack"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "43",
        "Title": "Multiply Strings",
        "Slug": "multiply-strings",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Simulation"
        ],
        "Space": "O(n+m)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "44",
        "Title": "Wildcard Matching",
        "Slug": "wildcard-matching",
        "Difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Greedy",
            "Recursion"
        ],
        "Space": "O(nm)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "45",
        "Title": "Jump Game II",
        "Slug": "jump-game-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "46",
        "Title": "Permutations",
        "Slug": "permutations",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "Space": "O(n)",
        "Time": "O(n!)",
        "Notes": ""
    },
    {
        "ID": "47",
        "Title": "Permutations II",
        "Slug": "permutations-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "Space": "O(n)",
        "Time": "O(n!)",
        "Notes": ""
    },
    {
        "ID": "48",
        "Title": "Rotate Image",
        "Slug": "rotate-image",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Matrix"
        ],
        "Space": "O(1)",
        "Time": "O(n<sup>2</sup>)",
        "Notes": ""
    },
    {
        "ID": "49",
        "Title": "Group Anagrams",
        "Slug": "group-anagrams",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "Space": "O(nk)",
        "Time": "O(nk&nbsp;log&nbsp;k)",
        "Notes": ""
    },
    {
        "ID": "50",
        "Title": "Pow(x, n)",
        "Slug": "powx-n",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Recursion"
        ],
        "Space": "O(1)",
        "Time": "O(log&nbsp;n)",
        "Notes": ""
    },
    {
        "ID": "51",
        "Title": "N-Queens",
        "Slug": "n-queens",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "Space": "O(n<sup>2</sup>)",
        "Time": "O(n!)",
        "Notes": ""
    },
    {
        "ID": "52",
        "Title": "N-Queens II",
        "Slug": "n-queens-ii",
        "Difficulty": "Hard",
        "Tags": [
            "Backtracking"
        ],
        "Space": "O(n)",
        "Time": "O(n!)",
        "Notes": ""
    },
    {
        "ID": "53",
        "Title": "Maximum Subarray",
        "Slug": "maximum-subarray",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "54",
        "Title": "Spiral Matrix",
        "Slug": "spiral-matrix",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "Space": "O(1)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "55",
        "Title": "Jump Game",
        "Slug": "jump-game",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "56",
        "Title": "Merge Intervals",
        "Slug": "merge-intervals",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "O(n)",
        "Time": "O(n&nbsp;log&nbsp;n)",
        "Notes": ""
    },
    {
        "ID": "57",
        "Title": "Insert Interval",
        "Slug": "insert-interval",
        "Difficulty": "Medium",
        "Tags": [
            "Array"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "58",
        "Title": "Length of Last Word",
        "Slug": "length-of-last-word",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "59",
        "Title": "Spiral Matrix II",
        "Slug": "spiral-matrix-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "Space": "O(1)",
        "Time": "O(n<sup>2</sup>)",
        "Notes": ""
    },
    {
        "ID": "60",
        "Title": "Permutation Sequence",
        "Slug": "permutation-sequence",
        "Difficulty": "Hard",
        "Tags": [
            "Math",
            "Recursion"
        ],
        "Space": "O(1)",
        "Time": "O(n!)",
        "Notes": ""
    },
    {
        "ID": "61",
        "Title": "Rotate List",
        "Slug": "rotate-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "62",
        "Title": "Unique Paths",
        "Slug": "unique-paths",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "Space": "O(nm)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "63",
        "Title": "Unique Paths II",
        "Slug": "unique-paths-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "Space": "O(nm)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "64",
        "Title": "Minimum Path Sum",
        "Slug": "minimum-path-sum",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "Space": "O(nm)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "65",
        "Title": "Valid Number",
        "Slug": "valid-number",
        "Difficulty": "Hard",
        "Tags": [
            "String"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "66",
        "Title": "Plus One",
        "Slug": "plus-one",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "67",
        "Title": "Add Binary",
        "Slug": "add-binary",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Bit Manipulation",
            "Simulation"
        ],
        "Space": "O(1)",
        "Time": "O(max(n,m))",
        "Notes": ""
    },
    {
        "ID": "68",
        "Title": "Text Justification",
        "Slug": "text-justification",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Simulation"
        ],
        "Space": "O(1)",
        "Time": "O(nk)",
        "Notes": ""
    },
    {
        "ID": "69",
        "Title": "Sqrt(x)",
        "Slug": "sqrtx",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "Space": "O(1)",
        "Time": "O(log&nbsp;n)",
        "Notes": ""
    },
    {
        "ID": "70",
        "Title": "Climbing Stairs",
        "Slug": "climbing-stairs",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Memoization"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "71",
        "Title": "Simplify Path",
        "Slug": "simplify-path",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "72",
        "Title": "Edit Distance",
        "Slug": "edit-distance",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "O(nm)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "73",
        "Title": "Set Matrix Zeroes",
        "Slug": "set-matrix-zeroes",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "Space": "O(1)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "74",
        "Title": "Search a 2D Matrix",
        "Slug": "search-a-2d-matrix",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Matrix"
        ],
        "Space": "O(1)",
        "Time": "O(log&nbsp;nm)",
        "Notes": ""
    },
    {
        "ID": "75",
        "Title": "Sort Colors",
        "Slug": "sort-colors",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "76",
        "Title": "Minimum Window Substring",
        "Slug": "minimum-window-substring",
        "Difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "Space": "O(1)",
        "Time": "O(n+m)",
        "Notes": ""
    },
    {
        "ID": "77",
        "Title": "Combinations",
        "Slug": "combinations",
        "Difficulty": "Medium",
        "Tags": [
            "Backtracking"
        ],
        "Space": "O(k)",
        "Time": "O(kC(n,k))",
        "Notes": ""
    },
    {
        "ID": "78",
        "Title": "Subsets",
        "Slug": "subsets",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation"
        ],
        "Space": "O(n)",
        "Time": "O(n2<sup>n</sup>)",
        "Notes": ""
    },
    {
        "ID": "79",
        "Title": "Word Search",
        "Slug": "word-search",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking",
            "Matrix"
        ],
        "Space": "O(nm)",
        "Time": "O(nm4<sup>k</sup>)",
        "Notes": ""
    },
    {
        "ID": "80",
        "Title": "Remove Duplicates from Sorted Array II",
        "Slug": "remove-duplicates-from-sorted-array-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "81",
        "Title": "Search in Rotated Sorted Array II",
        "Slug": "search-in-rotated-sorted-array-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "82",
        "Title": "Remove Duplicates from Sorted List II",
        "Slug": "remove-duplicates-from-sorted-list-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "83",
        "Title": "Remove Duplicates from Sorted List",
        "Slug": "remove-duplicates-from-sorted-list",
        "Difficulty": "Easy",
        "Tags": [
            "Linked List"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "84",
        "Title": "Largest Rectangle in Histogram",
        "Slug": "largest-rectangle-in-histogram",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "85",
        "Title": "Maximal Rectangle",
        "Slug": "maximal-rectangle",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Stack",
            "Matrix",
            "Monotonic Stack"
        ],
        "Space": "O(m)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "86",
        "Title": "Partition List",
        "Slug": "partition-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "87",
        "Title": "Scramble String",
        "Slug": "scramble-string",
        "Difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "O(n<sup>2</sup>)",
        "Time": "O(n<sup>4</sup>)",
        "Notes": ""
    },
    {
        "ID": "88",
        "Title": "Merge Sorted Array",
        "Slug": "merge-sorted-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "O(1)",
        "Time": "O(n+m)",
        "Notes": ""
    },
    {
        "ID": "89",
        "Title": "Gray Code",
        "Slug": "gray-code",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Backtracking",
            "Bit Manipulation"
        ],
        "Space": "O(1)",
        "Time": "O(2<sup>n</sup>)",
        "Notes": ""
    },
    {
        "ID": "90",
        "Title": "Subsets II",
        "Slug": "subsets-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation"
        ],
        "Space": "O(n)",
        "Time": "O(n2<sup>n</sup>)",
        "Notes": ""
    },
    {
        "ID": "91",
        "Title": "Decode Ways",
        "Slug": "decode-ways",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "92",
        "Title": "Reverse Linked List II",
        "Slug": "reverse-linked-list-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "93",
        "Title": "Restore IP Addresses",
        "Slug": "restore-ip-addresses",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking"
        ],
        "Space": "O(nm)",
        "Time": "O(nm<sup>n</sup>)",
        "Notes": ""
    },
    {
        "ID": "94",
        "Title": "Binary Tree Inorder Traversal",
        "Slug": "binary-tree-inorder-traversal",
        "Difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "95",
        "Title": "Unique Binary Search Trees II",
        "Slug": "unique-binary-search-trees-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Backtracking",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "O(<sup>4<sup>n</sup></sup>&frasl;<sub>&radic;n</sub>)",
        "Time": "O(<sup>4<sup>n</sup></sup>&frasl;<sub>&radic;n</sub>)",
        "Notes": ""
    },
    {
        "ID": "96",
        "Title": "Unique Binary Search Trees",
        "Slug": "unique-binary-search-trees",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "O(n)",
        "Time": "O(n<sup>2</sup>)",
        "Notes": ""
    },
    {
        "ID": "97",
        "Title": "Interleaving String",
        "Slug": "interleaving-string",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "O(nm)",
        "Time": "O(nm)",
        "Notes": ""
    },
    {
        "ID": "98",
        "Title": "Validate Binary Search Tree",
        "Slug": "validate-binary-search-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "99",
        "Title": "Recover Binary Search Tree",
        "Slug": "recover-binary-search-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "100",
        "Title": "Same Tree",
        "Slug": "same-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "O(n)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "101",
        "Title": "Symmetric Tree",
        "Slug": "symmetric-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "102",
        "Title": "Binary Tree Level Order Traversal",
        "Slug": "binary-tree-level-order-traversal",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "103",
        "Title": "Binary Tree Zigzag Level Order Traversal",
        "Slug": "binary-tree-zigzag-level-order-traversal",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "104",
        "Title": "Maximum Depth of Binary Tree",
        "Slug": "maximum-depth-of-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "105",
        "Title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "Slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "106",
        "Title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "Slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "108",
        "Title": "Convert Sorted Array to Binary Search Tree",
        "Slug": "convert-sorted-array-to-binary-search-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "109",
        "Title": "Convert Sorted List to Binary Search Tree",
        "Slug": "convert-sorted-list-to-binary-search-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Divide and Conquer",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "110",
        "Title": "Balanced Binary Tree",
        "Slug": "balanced-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "111",
        "Title": "Minimum Depth of Binary Tree",
        "Slug": "minimum-depth-of-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "112",
        "Title": "Path Sum",
        "Slug": "path-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "113",
        "Title": "Path Sum II",
        "Slug": "path-sum-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Backtracking",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "114",
        "Title": "Flatten Binary Tree to Linked List",
        "Slug": "flatten-binary-tree-to-linked-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "115",
        "Title": "Distinct Subsequences",
        "Slug": "distinct-subsequences",
        "Difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "116",
        "Title": "Populating Next Right Pointers in Each Node",
        "Slug": "populating-next-right-pointers-in-each-node",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "117",
        "Title": "Populating Next Right Pointers in Each Node II",
        "Slug": "populating-next-right-pointers-in-each-node-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "118",
        "Title": "Pascal's Triangle",
        "Slug": "pascals-triangle",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "119",
        "Title": "Pascal's Triangle II",
        "Slug": "pascals-triangle-ii",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "120",
        "Title": "Triangle",
        "Slug": "triangle",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "121",
        "Title": "Best Time to Buy and Sell Stock",
        "Slug": "best-time-to-buy-and-sell-stock",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "122",
        "Title": "Best Time to Buy and Sell Stock II",
        "Slug": "best-time-to-buy-and-sell-stock-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "123",
        "Title": "Best Time to Buy and Sell Stock III",
        "Slug": "best-time-to-buy-and-sell-stock-iii",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "124",
        "Title": "Binary Tree Maximum Path Sum",
        "Slug": "binary-tree-maximum-path-sum",
        "Difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "125",
        "Title": "Valid Palindrome",
        "Slug": "valid-palindrome",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "126",
        "Title": "Word Ladder II",
        "Slug": "word-ladder-ii",
        "Difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Backtracking",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "127",
        "Title": "Word Ladder",
        "Slug": "word-ladder",
        "Difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "String",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "128",
        "Title": "Longest Consecutive Sequence",
        "Slug": "longest-consecutive-sequence",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Union Find"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "129",
        "Title": "Sum Root to Leaf Numbers",
        "Slug": "sum-root-to-leaf-numbers",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "130",
        "Title": "Surrounded Regions",
        "Slug": "surrounded-regions",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "131",
        "Title": "Palindrome Partitioning",
        "Slug": "palindrome-partitioning",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming",
            "Backtracking"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "133",
        "Title": "Clone Graph",
        "Slug": "clone-graph",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "134",
        "Title": "Gas Station",
        "Slug": "gas-station",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "135",
        "Title": "Candy",
        "Slug": "candy",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "136",
        "Title": "Single Number",
        "Slug": "single-number",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "137",
        "Title": "Single Number II",
        "Slug": "single-number-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "138",
        "Title": "Copy List with Random Pointer",
        "Slug": "copy-list-with-random-pointer",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Linked List"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "139",
        "Title": "Word Break",
        "Slug": "word-break",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Dynamic Programming",
            "Trie",
            "Memoization"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "141",
        "Title": "Linked List Cycle",
        "Slug": "linked-list-cycle",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "142",
        "Title": "Linked List Cycle II",
        "Slug": "linked-list-cycle-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "143",
        "Title": "Reorder List",
        "Slug": "reorder-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers",
            "Stack",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "144",
        "Title": "Binary Tree Preorder Traversal",
        "Slug": "binary-tree-preorder-traversal",
        "Difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "145",
        "Title": "Binary Tree Postorder Traversal",
        "Slug": "binary-tree-postorder-traversal",
        "Difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "146",
        "Title": "LRU Cache",
        "Slug": "lru-cache",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Design",
            "Doubly-Linked List"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "148",
        "Title": "Sort List",
        "Slug": "sort-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers",
            "Divide and Conquer",
            "Sorting",
            "Merge Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "149",
        "Title": "Max Points on a Line",
        "Slug": "max-points-on-a-line",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Geometry"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "150",
        "Title": "Evaluate Reverse Polish Notation",
        "Slug": "evaluate-reverse-polish-notation",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "151",
        "Title": "Reverse Words in a String",
        "Slug": "reverse-words-in-a-string",
        "Difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "152",
        "Title": "Maximum Product Subarray",
        "Slug": "maximum-product-subarray",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "153",
        "Title": "Find Minimum in Rotated Sorted Array",
        "Slug": "find-minimum-in-rotated-sorted-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "154",
        "Title": "Find Minimum in Rotated Sorted Array II",
        "Slug": "find-minimum-in-rotated-sorted-array-ii",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "155",
        "Title": "Min Stack",
        "Slug": "min-stack",
        "Difficulty": "Medium",
        "Tags": [
            "Stack",
            "Design"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "160",
        "Title": "Intersection of Two Linked Lists",
        "Slug": "intersection-of-two-linked-lists",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Linked List",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "162",
        "Title": "Find Peak Element",
        "Slug": "find-peak-element",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "167",
        "Title": "Two Sum II - Input Array Is Sorted",
        "Slug": "two-sum-ii-input-array-is-sorted",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "168",
        "Title": "Excel Sheet Column Title",
        "Slug": "excel-sheet-column-title",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "169",
        "Title": "Majority Element",
        "Slug": "majority-element",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Sorting",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "171",
        "Title": "Excel Sheet Column Number",
        "Slug": "excel-sheet-column-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "172",
        "Title": "Factorial Trailing Zeroes",
        "Slug": "factorial-trailing-zeroes",
        "Difficulty": "Medium",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "173",
        "Title": "Binary Search Tree Iterator",
        "Slug": "binary-search-tree-iterator",
        "Difficulty": "Medium",
        "Tags": [
            "Stack",
            "Tree",
            "Design",
            "Binary Search Tree",
            "Binary Tree",
            "Iterator"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "187",
        "Title": "Repeated DNA Sequences",
        "Slug": "repeated-dna-sequences",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Sliding Window",
            "Rolling Hash",
            "Hash Function"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "188",
        "Title": "Best Time to Buy and Sell Stock IV",
        "Slug": "best-time-to-buy-and-sell-stock-iv",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "189",
        "Title": "Rotate Array",
        "Slug": "rotate-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "190",
        "Title": "Reverse Bits",
        "Slug": "reverse-bits",
        "Difficulty": "Easy",
        "Tags": [
            "Divide and Conquer",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "191",
        "Title": "Number of 1 Bits",
        "Slug": "number-of-1-bits",
        "Difficulty": "Easy",
        "Tags": [
            "Divide and Conquer",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "198",
        "Title": "House Robber",
        "Slug": "house-robber",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "199",
        "Title": "Binary Tree Right Side View",
        "Slug": "binary-tree-right-side-view",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "200",
        "Title": "Number of Islands",
        "Slug": "number-of-islands",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "201",
        "Title": "Bitwise AND of Numbers Range",
        "Slug": "bitwise-and-of-numbers-range",
        "Difficulty": "Medium",
        "Tags": [
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "202",
        "Title": "Happy Number",
        "Slug": "happy-number",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "203",
        "Title": "Remove Linked List Elements",
        "Slug": "remove-linked-list-elements",
        "Difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "205",
        "Title": "Isomorphic Strings",
        "Slug": "isomorphic-strings",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "206",
        "Title": "Reverse Linked List",
        "Slug": "reverse-linked-list",
        "Difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "207",
        "Title": "Course Schedule",
        "Slug": "course-schedule",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "208",
        "Title": "Implement Trie (Prefix Tree)",
        "Slug": "implement-trie-prefix-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Design",
            "Trie"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "209",
        "Title": "Minimum Size Subarray Sum",
        "Slug": "minimum-size-subarray-sum",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "210",
        "Title": "Course Schedule II",
        "Slug": "course-schedule-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "211",
        "Title": "Design Add and Search Words Data Structure",
        "Slug": "design-add-and-search-words-data-structure",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Depth-First Search",
            "Design",
            "Trie"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "212",
        "Title": "Word Search II",
        "Slug": "word-search-ii",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Backtracking",
            "Trie",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "213",
        "Title": "House Robber II",
        "Slug": "house-robber-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "215",
        "Title": "Kth Largest Element in an Array",
        "Slug": "kth-largest-element-in-an-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Sorting",
            "Heap (Priority Queue)",
            "Quickselect"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "216",
        "Title": "Combination Sum III",
        "Slug": "combination-sum-iii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Backtracking"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "217",
        "Title": "Contains Duplicate",
        "Slug": "contains-duplicate",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "219",
        "Title": "Contains Duplicate II",
        "Slug": "contains-duplicate-ii",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "221",
        "Title": "Maximal Square",
        "Slug": "maximal-square",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "222",
        "Title": "Count Complete Tree Nodes",
        "Slug": "count-complete-tree-nodes",
        "Difficulty": "Easy",
        "Tags": [
            "Binary Search",
            "Bit Manipulation",
            "Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "224",
        "Title": "Basic Calculator",
        "Slug": "basic-calculator",
        "Difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Stack",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "225",
        "Title": "Implement Stack using Queues",
        "Slug": "implement-stack-using-queues",
        "Difficulty": "Easy",
        "Tags": [
            "Stack",
            "Design",
            "Queue"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "226",
        "Title": "Invert Binary Tree",
        "Slug": "invert-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "227",
        "Title": "Basic Calculator II",
        "Slug": "basic-calculator-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "228",
        "Title": "Summary Ranges",
        "Slug": "summary-ranges",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "229",
        "Title": "Majority Element II",
        "Slug": "majority-element-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "230",
        "Title": "Kth Smallest Element in a BST",
        "Slug": "kth-smallest-element-in-a-bst",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "231",
        "Title": "Power of Two",
        "Slug": "power-of-two",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "232",
        "Title": "Implement Queue using Stacks",
        "Slug": "implement-queue-using-stacks",
        "Difficulty": "Easy",
        "Tags": [
            "Stack",
            "Design",
            "Queue"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "233",
        "Title": "Number of Digit One",
        "Slug": "number-of-digit-one",
        "Difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "234",
        "Title": "Palindrome Linked List",
        "Slug": "palindrome-linked-list",
        "Difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Two Pointers",
            "Stack",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "235",
        "Title": "Lowest Common Ancestor of a Binary Search Tree",
        "Slug": "lowest-common-ancestor-of-a-binary-search-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "236",
        "Title": "Lowest Common Ancestor of a Binary Tree",
        "Slug": "lowest-common-ancestor-of-a-binary-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "237",
        "Title": "Delete Node in a Linked List",
        "Slug": "delete-node-in-a-linked-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "238",
        "Title": "Product of Array Except Self",
        "Slug": "product-of-array-except-self",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "239",
        "Title": "Sliding Window Maximum",
        "Slug": "sliding-window-maximum",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Queue",
            "Sliding Window",
            "Heap (Priority Queue)",
            "Monotonic Queue"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "240",
        "Title": "Search a 2D Matrix II",
        "Slug": "search-a-2d-matrix-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Divide and Conquer",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "242",
        "Title": "Valid Anagram",
        "Slug": "valid-anagram",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "257",
        "Title": "Binary Tree Paths",
        "Slug": "binary-tree-paths",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Backtracking",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "258",
        "Title": "Add Digits",
        "Slug": "add-digits",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation",
            "Number Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "260",
        "Title": "Single Number III",
        "Slug": "single-number-iii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "263",
        "Title": "Ugly Number",
        "Slug": "ugly-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "264",
        "Title": "Ugly Number II",
        "Slug": "ugly-number-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Math",
            "Dynamic Programming",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "268",
        "Title": "Missing Number",
        "Slug": "missing-number",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Binary Search",
            "Bit Manipulation",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "274",
        "Title": "H-Index",
        "Slug": "h-index",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting",
            "Counting Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "275",
        "Title": "H-Index II",
        "Slug": "h-index-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "278",
        "Title": "First Bad Version",
        "Slug": "first-bad-version",
        "Difficulty": "Easy",
        "Tags": [
            "Binary Search",
            "Interactive"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "279",
        "Title": "Perfect Squares",
        "Slug": "perfect-squares",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "283",
        "Title": "Move Zeroes",
        "Slug": "move-zeroes",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "287",
        "Title": "Find the Duplicate Number",
        "Slug": "find-the-duplicate-number",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "289",
        "Title": "Game of Life",
        "Slug": "game-of-life",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "290",
        "Title": "Word Pattern",
        "Slug": "word-pattern",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "292",
        "Title": "Nim Game",
        "Slug": "nim-game",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Brainteaser",
            "Game Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "295",
        "Title": "Find Median from Data Stream",
        "Slug": "find-median-from-data-stream",
        "Difficulty": "Hard",
        "Tags": [
            "Two Pointers",
            "Design",
            "Sorting",
            "Heap (Priority Queue)",
            "Data Stream"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "297",
        "Title": "Serialize and Deserialize Binary Tree",
        "Slug": "serialize-and-deserialize-binary-tree",
        "Difficulty": "Hard",
        "Tags": [
            "String",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Design",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "299",
        "Title": "Bulls and Cows",
        "Slug": "bulls-and-cows",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "300",
        "Title": "Longest Increasing Subsequence",
        "Slug": "longest-increasing-subsequence",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "303",
        "Title": "Range Sum Query - Immutable",
        "Slug": "range-sum-query-immutable",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Design",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "304",
        "Title": "Range Sum Query 2D - Immutable",
        "Slug": "range-sum-query-2d-immutable",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Design",
            "Matrix",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "309",
        "Title": "Best Time to Buy and Sell Stock with Cooldown",
        "Slug": "best-time-to-buy-and-sell-stock-with-cooldown",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "316",
        "Title": "Remove Duplicate Letters",
        "Slug": "remove-duplicate-letters",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "319",
        "Title": "Bulb Switcher",
        "Slug": "bulb-switcher",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Brainteaser"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "322",
        "Title": "Coin Change",
        "Slug": "coin-change",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "326",
        "Title": "Power of Three",
        "Slug": "power-of-three",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "328",
        "Title": "Odd Even Linked List",
        "Slug": "odd-even-linked-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "332",
        "Title": "Reconstruct Itinerary",
        "Slug": "reconstruct-itinerary",
        "Difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Graph",
            "Eulerian Circuit"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "334",
        "Title": "Increasing Triplet Subsequence",
        "Slug": "increasing-triplet-subsequence",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "338",
        "Title": "Counting Bits",
        "Slug": "counting-bits",
        "Difficulty": "Easy",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "341",
        "Title": "Flatten Nested List Iterator",
        "Slug": "flatten-nested-list-iterator",
        "Difficulty": "Medium",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Design",
            "Queue",
            "Iterator"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "342",
        "Title": "Power of Four",
        "Slug": "power-of-four",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "343",
        "Title": "Integer Break",
        "Slug": "integer-break",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "344",
        "Title": "Reverse String",
        "Slug": "reverse-string",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "345",
        "Title": "Reverse Vowels of a String",
        "Slug": "reverse-vowels-of-a-string",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "347",
        "Title": "Top K Frequent Elements",
        "Slug": "top-k-frequent-elements",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Sorting",
            "Heap (Priority Queue)",
            "Bucket Sort",
            "Counting",
            "Quickselect"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "349",
        "Title": "Intersection of Two Arrays",
        "Slug": "intersection-of-two-arrays",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "350",
        "Title": "Intersection of Two Arrays II",
        "Slug": "intersection-of-two-arrays-ii",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "365",
        "Title": "Water and Jug Problem",
        "Slug": "water-and-jug-problem",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "367",
        "Title": "Valid Perfect Square",
        "Slug": "valid-perfect-square",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "373",
        "Title": "Find K Pairs with Smallest Sums",
        "Slug": "find-k-pairs-with-smallest-sums",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "374",
        "Title": "Guess Number Higher or Lower",
        "Slug": "guess-number-higher-or-lower",
        "Difficulty": "Easy",
        "Tags": [
            "Binary Search",
            "Interactive"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "376",
        "Title": "Wiggle Subsequence",
        "Slug": "wiggle-subsequence",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "377",
        "Title": "Combination Sum IV",
        "Slug": "combination-sum-iv",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "380",
        "Title": "Insert Delete GetRandom O(1)",
        "Slug": "insert-delete-getrandom-o1",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Design",
            "Randomized"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "382",
        "Title": "Linked List Random Node",
        "Slug": "linked-list-random-node",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Math",
            "Reservoir Sampling",
            "Randomized"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "383",
        "Title": "Ransom Note",
        "Slug": "ransom-note",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "384",
        "Title": "Shuffle an Array",
        "Slug": "shuffle-an-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Randomized"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "387",
        "Title": "First Unique Character in a String",
        "Slug": "first-unique-character-in-a-string",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Queue",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "389",
        "Title": "Find the Difference",
        "Slug": "find-the-difference",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "392",
        "Title": "Is Subsequence",
        "Slug": "is-subsequence",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "394",
        "Title": "Decode String",
        "Slug": "decode-string",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "399",
        "Title": "Evaluate Division",
        "Slug": "evaluate-division",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph",
            "Shortest Path"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "401",
        "Title": "Binary Watch",
        "Slug": "binary-watch",
        "Difficulty": "Easy",
        "Tags": [
            "Backtracking",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "403",
        "Title": "Frog Jump",
        "Slug": "frog-jump",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "404",
        "Title": "Sum of Left Leaves",
        "Slug": "sum-of-left-leaves",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "405",
        "Title": "Convert a Number to Hexadecimal",
        "Slug": "convert-a-number-to-hexadecimal",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "409",
        "Title": "Longest Palindrome",
        "Slug": "longest-palindrome",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "412",
        "Title": "Fizz Buzz",
        "Slug": "fizz-buzz",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "413",
        "Title": "Arithmetic Slices",
        "Slug": "arithmetic-slices",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "414",
        "Title": "Third Maximum Number",
        "Slug": "third-maximum-number",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "415",
        "Title": "Add Strings",
        "Slug": "add-strings",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "416",
        "Title": "Partition Equal Subset Sum",
        "Slug": "partition-equal-subset-sum",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "417",
        "Title": "Pacific Atlantic Water Flow",
        "Slug": "pacific-atlantic-water-flow",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "424",
        "Title": "Longest Repeating Character Replacement",
        "Slug": "longest-repeating-character-replacement",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "427",
        "Title": "Construct Quad Tree",
        "Slug": "construct-quad-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Tree",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "429",
        "Title": "N-ary Tree Level Order Traversal",
        "Slug": "n-ary-tree-level-order-traversal",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "433",
        "Title": "Minimum Genetic Mutation",
        "Slug": "minimum-genetic-mutation",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "434",
        "Title": "Number of Segments in a String",
        "Slug": "number-of-segments-in-a-string",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "435",
        "Title": "Non-overlapping Intervals",
        "Slug": "non-overlapping-intervals",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "436",
        "Title": "Find Right Interval",
        "Slug": "find-right-interval",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "437",
        "Title": "Path Sum III",
        "Slug": "path-sum-iii",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "438",
        "Title": "Find All Anagrams in a String",
        "Slug": "find-all-anagrams-in-a-string",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "441",
        "Title": "Arranging Coins",
        "Slug": "arranging-coins",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "443",
        "Title": "String Compression",
        "Slug": "string-compression",
        "Difficulty": "Medium",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "445",
        "Title": "Add Two Numbers II",
        "Slug": "add-two-numbers-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Math",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "448",
        "Title": "Find All Numbers Disappeared in an Array",
        "Slug": "find-all-numbers-disappeared-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "450",
        "Title": "Delete Node in a BST",
        "Slug": "delete-node-in-a-bst",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "451",
        "Title": "Sort Characters By Frequency",
        "Slug": "sort-characters-by-frequency",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sorting",
            "Heap (Priority Queue)",
            "Bucket Sort",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "452",
        "Title": "Minimum Number of Arrows to Burst Balloons",
        "Slug": "minimum-number-of-arrows-to-burst-balloons",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "455",
        "Title": "Assign Cookies",
        "Slug": "assign-cookies",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "456",
        "Title": "132 Pattern",
        "Slug": "132-pattern",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Stack",
            "Monotonic Stack",
            "Ordered Set"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "459",
        "Title": "Repeated Substring Pattern",
        "Slug": "repeated-substring-pattern",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "String Matching"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "461",
        "Title": "Hamming Distance",
        "Slug": "hamming-distance",
        "Difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "463",
        "Title": "Island Perimeter",
        "Slug": "island-perimeter",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "476",
        "Title": "Number Complement",
        "Slug": "number-complement",
        "Difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "482",
        "Title": "License Key Formatting",
        "Slug": "license-key-formatting",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "485",
        "Title": "Max Consecutive Ones",
        "Slug": "max-consecutive-ones",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "486",
        "Title": "Predict the Winner",
        "Slug": "predict-the-winner",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Recursion",
            "Game Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "492",
        "Title": "Construct the Rectangle",
        "Slug": "construct-the-rectangle",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "495",
        "Title": "Teemo Attacking",
        "Slug": "teemo-attacking",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "496",
        "Title": "Next Greater Element I",
        "Slug": "next-greater-element-i",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Stack",
            "Monotonic Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "500",
        "Title": "Keyboard Row",
        "Slug": "keyboard-row",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "501",
        "Title": "Find Mode in Binary Search Tree",
        "Slug": "find-mode-in-binary-search-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "502",
        "Title": "IPO",
        "Slug": "ipo",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "503",
        "Title": "Next Greater Element II",
        "Slug": "next-greater-element-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "504",
        "Title": "Base 7",
        "Slug": "base-7",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "506",
        "Title": "Relative Ranks",
        "Slug": "relative-ranks",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "507",
        "Title": "Perfect Number",
        "Slug": "perfect-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "509",
        "Title": "Fibonacci Number",
        "Slug": "fibonacci-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Recursion",
            "Memoization"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "515",
        "Title": "Find Largest Value in Each Tree Row",
        "Slug": "find-largest-value-in-each-tree-row",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "516",
        "Title": "Longest Palindromic Subsequence",
        "Slug": "longest-palindromic-subsequence",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "518",
        "Title": "Coin Change II",
        "Slug": "coin-change-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "520",
        "Title": "Detect Capital",
        "Slug": "detect-capital",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "521",
        "Title": "Longest Uncommon Subsequence I",
        "Slug": "longest-uncommon-subsequence-i",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "528",
        "Title": "Random Pick with Weight",
        "Slug": "random-pick-with-weight",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Binary Search",
            "Prefix Sum",
            "Randomized"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "530",
        "Title": "Minimum Absolute Difference in BST",
        "Slug": "minimum-absolute-difference-in-bst",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "540",
        "Title": "Single Element in a Sorted Array",
        "Slug": "single-element-in-a-sorted-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "541",
        "Title": "Reverse String II",
        "Slug": "reverse-string-ii",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "542",
        "Title": "01 Matrix",
        "Slug": "01-matrix",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "543",
        "Title": "Diameter of Binary Tree",
        "Slug": "diameter-of-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "547",
        "Title": "Number of Provinces",
        "Slug": "number-of-provinces",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "551",
        "Title": "Student Attendance Record I",
        "Slug": "student-attendance-record-i",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "556",
        "Title": "Next Greater Element III",
        "Slug": "next-greater-element-iii",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "557",
        "Title": "Reverse Words in a String III",
        "Slug": "reverse-words-in-a-string-iii",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "559",
        "Title": "Maximum Depth of N-ary Tree",
        "Slug": "maximum-depth-of-n-ary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "560",
        "Title": "Subarray Sum Equals K",
        "Slug": "subarray-sum-equals-k",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "561",
        "Title": "Array Partition",
        "Slug": "array-partition",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Counting Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "563",
        "Title": "Binary Tree Tilt",
        "Slug": "binary-tree-tilt",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "566",
        "Title": "Reshape the Matrix",
        "Slug": "reshape-the-matrix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "567",
        "Title": "Permutation in String",
        "Slug": "permutation-in-string",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Two Pointers",
            "String",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "572",
        "Title": "Subtree of Another Tree",
        "Slug": "subtree-of-another-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "String Matching",
            "Binary Tree",
            "Hash Function"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "575",
        "Title": "Distribute Candies",
        "Slug": "distribute-candies",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "583",
        "Title": "Delete Operation for Two Strings",
        "Slug": "delete-operation-for-two-strings",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "589",
        "Title": "N-ary Tree Preorder Traversal",
        "Slug": "n-ary-tree-preorder-traversal",
        "Difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "590",
        "Title": "N-ary Tree Postorder Traversal",
        "Slug": "n-ary-tree-postorder-traversal",
        "Difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "594",
        "Title": "Longest Harmonious Subsequence",
        "Slug": "longest-harmonious-subsequence",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "598",
        "Title": "Range Addition II",
        "Slug": "range-addition-ii",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "599",
        "Title": "Minimum Index Sum of Two Lists",
        "Slug": "minimum-index-sum-of-two-lists",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "605",
        "Title": "Can Place Flowers",
        "Slug": "can-place-flowers",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "606",
        "Title": "Construct String from Binary Tree",
        "Slug": "construct-string-from-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "611",
        "Title": "Valid Triangle Number",
        "Slug": "valid-triangle-number",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "617",
        "Title": "Merge Two Binary Trees",
        "Slug": "merge-two-binary-trees",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "621",
        "Title": "Task Scheduler",
        "Slug": "task-scheduler",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "622",
        "Title": "Design Circular Queue",
        "Slug": "design-circular-queue",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Linked List",
            "Design",
            "Queue"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "628",
        "Title": "Maximum Product of Three Numbers",
        "Slug": "maximum-product-of-three-numbers",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "633",
        "Title": "Sum of Square Numbers",
        "Slug": "sum-of-square-numbers",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Two Pointers",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "637",
        "Title": "Average of Levels in Binary Tree",
        "Slug": "average-of-levels-in-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "643",
        "Title": "Maximum Average Subarray I",
        "Slug": "maximum-average-subarray-i",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "645",
        "Title": "Set Mismatch",
        "Slug": "set-mismatch",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "646",
        "Title": "Maximum Length of Pair Chain",
        "Slug": "maximum-length-of-pair-chain",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "649",
        "Title": "Dota2 Senate",
        "Slug": "dota2-senate",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Greedy",
            "Queue"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "652",
        "Title": "Find Duplicate Subtrees",
        "Slug": "find-duplicate-subtrees",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "653",
        "Title": "Two Sum IV - Input is a BST",
        "Slug": "two-sum-iv-input-is-a-bst",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Two Pointers",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "657",
        "Title": "Robot Return to Origin",
        "Slug": "robot-return-to-origin",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "658",
        "Title": "Find K Closest Elements",
        "Slug": "find-k-closest-elements",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sliding Window",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "661",
        "Title": "Image Smoother",
        "Slug": "image-smoother",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "662",
        "Title": "Maximum Width of Binary Tree",
        "Slug": "maximum-width-of-binary-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "664",
        "Title": "Strange Printer",
        "Slug": "strange-printer",
        "Difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "671",
        "Title": "Second Minimum Node In a Binary Tree",
        "Slug": "second-minimum-node-in-a-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "673",
        "Title": "Number of Longest Increasing Subsequence",
        "Slug": "number-of-longest-increasing-subsequence",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "674",
        "Title": "Longest Continuous Increasing Subsequence",
        "Slug": "longest-continuous-increasing-subsequence",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "680",
        "Title": "Valid Palindrome II",
        "Slug": "valid-palindrome-ii",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "682",
        "Title": "Baseball Game",
        "Slug": "baseball-game",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Stack",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "686",
        "Title": "Repeated String Match",
        "Slug": "repeated-string-match",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "String Matching"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "688",
        "Title": "Knight Probability in Chessboard",
        "Slug": "knight-probability-in-chessboard",
        "Difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "692",
        "Title": "Top K Frequent Words",
        "Slug": "top-k-frequent-words",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Trie",
            "Sorting",
            "Heap (Priority Queue)",
            "Bucket Sort",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "693",
        "Title": "Binary Number with Alternating Bits",
        "Slug": "binary-number-with-alternating-bits",
        "Difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "695",
        "Title": "Max Area of Island",
        "Slug": "max-area-of-island",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "696",
        "Title": "Count Binary Substrings",
        "Slug": "count-binary-substrings",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "697",
        "Title": "Degree of an Array",
        "Slug": "degree-of-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "700",
        "Title": "Search in a Binary Search Tree",
        "Slug": "search-in-a-binary-search-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "701",
        "Title": "Insert into a Binary Search Tree",
        "Slug": "insert-into-a-binary-search-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "703",
        "Title": "Kth Largest Element in a Stream",
        "Slug": "kth-largest-element-in-a-stream",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Design",
            "Binary Search Tree",
            "Heap (Priority Queue)",
            "Binary Tree",
            "Data Stream"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "704",
        "Title": "Binary Search",
        "Slug": "binary-search",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "705",
        "Title": "Design HashSet",
        "Slug": "design-hashset",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Linked List",
            "Design",
            "Hash Function"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "706",
        "Title": "Design HashMap",
        "Slug": "design-hashmap",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Linked List",
            "Design",
            "Hash Function"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "707",
        "Title": "Design Linked List",
        "Slug": "design-linked-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Design"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "709",
        "Title": "To Lower Case",
        "Slug": "to-lower-case",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "712",
        "Title": "Minimum ASCII Delete Sum for Two Strings",
        "Slug": "minimum-ascii-delete-sum-for-two-strings",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "713",
        "Title": "Subarray Product Less Than K",
        "Slug": "subarray-product-less-than-k",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "714",
        "Title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "Slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "717",
        "Title": "1-bit and 2-bit Characters",
        "Slug": "1-bit-and-2-bit-characters",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "724",
        "Title": "Find Pivot Index",
        "Slug": "find-pivot-index",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "725",
        "Title": "Split Linked List in Parts",
        "Slug": "split-linked-list-in-parts",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "728",
        "Title": "Self Dividing Numbers",
        "Slug": "self-dividing-numbers",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "729",
        "Title": "My Calendar I",
        "Slug": "my-calendar-i",
        "Difficulty": "Medium",
        "Tags": [
            "Binary Search",
            "Design",
            "Segment Tree",
            "Ordered Set"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "731",
        "Title": "My Calendar II",
        "Slug": "my-calendar-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Binary Search",
            "Design",
            "Segment Tree",
            "Ordered Set"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "732",
        "Title": "My Calendar III",
        "Slug": "my-calendar-iii",
        "Difficulty": "Hard",
        "Tags": [
            "Binary Search",
            "Design",
            "Segment Tree",
            "Ordered Set"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "733",
        "Title": "Flood Fill",
        "Slug": "flood-fill",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "735",
        "Title": "Asteroid Collision",
        "Slug": "asteroid-collision",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "739",
        "Title": "Daily Temperatures",
        "Slug": "daily-temperatures",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "740",
        "Title": "Delete and Earn",
        "Slug": "delete-and-earn",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "741",
        "Title": "Cherry Pickup",
        "Slug": "cherry-pickup",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "744",
        "Title": "Find Smallest Letter Greater Than Target",
        "Slug": "find-smallest-letter-greater-than-target",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "746",
        "Title": "Min Cost Climbing Stairs",
        "Slug": "min-cost-climbing-stairs",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "747",
        "Title": "Largest Number At Least Twice of Others",
        "Slug": "largest-number-at-least-twice-of-others",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "748",
        "Title": "Shortest Completing Word",
        "Slug": "shortest-completing-word",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "752",
        "Title": "Open the Lock",
        "Slug": "open-the-lock",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "762",
        "Title": "Prime Number of Set Bits in Binary Representation",
        "Slug": "prime-number-of-set-bits-in-binary-representation",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "763",
        "Title": "Partition Labels",
        "Slug": "partition-labels",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "766",
        "Title": "Toeplitz Matrix",
        "Slug": "toeplitz-matrix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "767",
        "Title": "Reorganize String",
        "Slug": "reorganize-string",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "771",
        "Title": "Jewels and Stones",
        "Slug": "jewels-and-stones",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "773",
        "Title": "Sliding Puzzle",
        "Slug": "sliding-puzzle",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "779",
        "Title": "K-th Symbol in Grammar",
        "Slug": "k-th-symbol-in-grammar",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Bit Manipulation",
            "Recursion"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "783",
        "Title": "Minimum Distance Between BST Nodes",
        "Slug": "minimum-distance-between-bst-nodes",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "784",
        "Title": "Letter Case Permutation",
        "Slug": "letter-case-permutation",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Backtracking",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "785",
        "Title": "Is Graph Bipartite?",
        "Slug": "is-graph-bipartite",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "787",
        "Title": "Cheapest Flights Within K Stops",
        "Slug": "cheapest-flights-within-k-stops",
        "Difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Heap (Priority Queue)",
            "Shortest Path"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "790",
        "Title": "Domino and Tromino Tiling",
        "Slug": "domino-and-tromino-tiling",
        "Difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "796",
        "Title": "Rotate String",
        "Slug": "rotate-string",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "String Matching"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "797",
        "Title": "All Paths From Source to Target",
        "Slug": "all-paths-from-source-to-target",
        "Difficulty": "Medium",
        "Tags": [
            "Backtracking",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "799",
        "Title": "Champagne Tower",
        "Slug": "champagne-tower",
        "Difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "802",
        "Title": "Find Eventual Safe States",
        "Slug": "find-eventual-safe-states",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "804",
        "Title": "Unique Morse Code Words",
        "Slug": "unique-morse-code-words",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "806",
        "Title": "Number of Lines To Write String",
        "Slug": "number-of-lines-to-write-string",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "808",
        "Title": "Soup Servings",
        "Slug": "soup-servings",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Probability and Statistics"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "812",
        "Title": "Largest Triangle Area",
        "Slug": "largest-triangle-area",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "815",
        "Title": "Bus Routes",
        "Slug": "bus-routes",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "819",
        "Title": "Most Common Word",
        "Slug": "most-common-word",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "821",
        "Title": "Shortest Distance to a Character",
        "Slug": "shortest-distance-to-a-character",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "823",
        "Title": "Binary Trees With Factors",
        "Slug": "binary-trees-with-factors",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Dynamic Programming",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "824",
        "Title": "Goat Latin",
        "Slug": "goat-latin",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "826",
        "Title": "Most Profit Assigning Work",
        "Slug": "most-profit-assigning-work",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "830",
        "Title": "Positions of Large Groups",
        "Slug": "positions-of-large-groups",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "832",
        "Title": "Flipping an Image",
        "Slug": "flipping-an-image",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "836",
        "Title": "Rectangle Overlap",
        "Slug": "rectangle-overlap",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Geometry"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "837",
        "Title": "New 21 Game",
        "Slug": "new-21-game",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Sliding Window",
            "Probability and Statistics"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "839",
        "Title": "Similar String Groups",
        "Slug": "similar-string-groups",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "841",
        "Title": "Keys and Rooms",
        "Slug": "keys-and-rooms",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "843",
        "Title": "Guess the Word",
        "Slug": "guess-the-word",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "String",
            "Interactive",
            "Game Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "844",
        "Title": "Backspace String Compare",
        "Slug": "backspace-string-compare",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String",
            "Stack",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "847",
        "Title": "Shortest Path Visiting All Nodes",
        "Slug": "shortest-path-visiting-all-nodes",
        "Difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation",
            "Breadth-First Search",
            "Graph",
            "Bitmask"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "852",
        "Title": "Peak Index in a Mountain Array",
        "Slug": "peak-index-in-a-mountain-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "859",
        "Title": "Buddy Strings",
        "Slug": "buddy-strings",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "860",
        "Title": "Lemonade Change",
        "Slug": "lemonade-change",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "863",
        "Title": "All Nodes Distance K in Binary Tree",
        "Slug": "all-nodes-distance-k-in-binary-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "864",
        "Title": "Shortest Path to Get All Keys",
        "Slug": "shortest-path-to-get-all-keys",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "867",
        "Title": "Transpose Matrix",
        "Slug": "transpose-matrix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "868",
        "Title": "Binary Gap",
        "Slug": "binary-gap",
        "Difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "872",
        "Title": "Leaf-Similar Trees",
        "Slug": "leaf-similar-trees",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "875",
        "Title": "Koko Eating Bananas",
        "Slug": "koko-eating-bananas",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "876",
        "Title": "Middle of the Linked List",
        "Slug": "middle-of-the-linked-list",
        "Difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "879",
        "Title": "Profitable Schemes",
        "Slug": "profitable-schemes",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "880",
        "Title": "Decoded String at Index",
        "Slug": "decoded-string-at-index",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "881",
        "Title": "Boats to Save People",
        "Slug": "boats-to-save-people",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "883",
        "Title": "Projection Area of 3D Shapes",
        "Slug": "projection-area-of-3d-shapes",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "884",
        "Title": "Uncommon Words from Two Sentences",
        "Slug": "uncommon-words-from-two-sentences",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "886",
        "Title": "Possible Bipartition",
        "Slug": "possible-bipartition",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "888",
        "Title": "Fair Candy Swap",
        "Slug": "fair-candy-swap",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "892",
        "Title": "Surface Area of 3D Shapes",
        "Slug": "surface-area-of-3d-shapes",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "894",
        "Title": "All Possible Full Binary Trees",
        "Slug": "all-possible-full-binary-trees",
        "Difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Recursion",
            "Memoization",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "895",
        "Title": "Maximum Frequency Stack",
        "Slug": "maximum-frequency-stack",
        "Difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Stack",
            "Design",
            "Ordered Set"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "896",
        "Title": "Monotonic Array",
        "Slug": "monotonic-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "897",
        "Title": "Increasing Order Search Tree",
        "Slug": "increasing-order-search-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "899",
        "Title": "Orderly Queue",
        "Slug": "orderly-queue",
        "Difficulty": "Hard",
        "Tags": [
            "Math",
            "String",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "901",
        "Title": "Online Stock Span",
        "Slug": "online-stock-span",
        "Difficulty": "Medium",
        "Tags": [
            "Stack",
            "Design",
            "Monotonic Stack",
            "Data Stream"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "905",
        "Title": "Sort Array By Parity",
        "Slug": "sort-array-by-parity",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "908",
        "Title": "Smallest Range I",
        "Slug": "smallest-range-i",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "909",
        "Title": "Snakes and Ladders",
        "Slug": "snakes-and-ladders",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "910",
        "Title": "Smallest Range II",
        "Slug": "smallest-range-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "911",
        "Title": "Online Election",
        "Slug": "online-election",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Design"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "912",
        "Title": "Sort an Array",
        "Slug": "sort-an-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Sorting",
            "Heap (Priority Queue)",
            "Merge Sort",
            "Bucket Sort",
            "Radix Sort",
            "Counting Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "914",
        "Title": "X of a Kind in a Deck of Cards",
        "Slug": "x-of-a-kind-in-a-deck-of-cards",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Counting",
            "Number Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "917",
        "Title": "Reverse Only Letters",
        "Slug": "reverse-only-letters",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "918",
        "Title": "Maximum Sum Circular Subarray",
        "Slug": "maximum-sum-circular-subarray",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming",
            "Queue",
            "Monotonic Queue"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "920",
        "Title": "Number of Music Playlists",
        "Slug": "number-of-music-playlists",
        "Difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "922",
        "Title": "Sort Array By Parity II",
        "Slug": "sort-array-by-parity-ii",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "925",
        "Title": "Long Pressed Name",
        "Slug": "long-pressed-name",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "929",
        "Title": "Unique Email Addresses",
        "Slug": "unique-email-addresses",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "931",
        "Title": "Minimum Falling Path Sum",
        "Slug": "minimum-falling-path-sum",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "933",
        "Title": "Number of Recent Calls",
        "Slug": "number-of-recent-calls",
        "Difficulty": "Easy",
        "Tags": [
            "Design",
            "Queue",
            "Data Stream"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "934",
        "Title": "Shortest Bridge",
        "Slug": "shortest-bridge",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "938",
        "Title": "Range Sum of BST",
        "Slug": "range-sum-of-bst",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "941",
        "Title": "Valid Mountain Array",
        "Slug": "valid-mountain-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "942",
        "Title": "DI String Match",
        "Slug": "di-string-match",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "944",
        "Title": "Delete Columns to Make Sorted",
        "Slug": "delete-columns-to-make-sorted",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "946",
        "Title": "Validate Stack Sequences",
        "Slug": "validate-stack-sequences",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Stack",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "947",
        "Title": "Most Stones Removed with Same Row or Column",
        "Slug": "most-stones-removed-with-same-row-or-column",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Depth-First Search",
            "Union Find",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "949",
        "Title": "Largest Time for Given Digits",
        "Slug": "largest-time-for-given-digits",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "953",
        "Title": "Verifying an Alien Dictionary",
        "Slug": "verifying-an-alien-dictionary",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "956",
        "Title": "Tallest Billboard",
        "Slug": "tallest-billboard",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "958",
        "Title": "Check Completeness of a Binary Tree",
        "Slug": "check-completeness-of-a-binary-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "961",
        "Title": "N-Repeated Element in Size 2N Array",
        "Slug": "n-repeated-element-in-size-2n-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "965",
        "Title": "Univalued Binary Tree",
        "Slug": "univalued-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "973",
        "Title": "K Closest Points to Origin",
        "Slug": "k-closest-points-to-origin",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Divide and Conquer",
            "Geometry",
            "Sorting",
            "Heap (Priority Queue)",
            "Quickselect"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "976",
        "Title": "Largest Perimeter Triangle",
        "Slug": "largest-perimeter-triangle",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "977",
        "Title": "Squares of a Sorted Array",
        "Slug": "squares-of-a-sorted-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "980",
        "Title": "Unique Paths III",
        "Slug": "unique-paths-iii",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "981",
        "Title": "Time Based Key-Value Store",
        "Slug": "time-based-key-value-store",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Binary Search",
            "Design"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "983",
        "Title": "Minimum Cost For Tickets",
        "Slug": "minimum-cost-for-tickets",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "986",
        "Title": "Interval List Intersections",
        "Slug": "interval-list-intersections",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "989",
        "Title": "Add to Array-Form of Integer",
        "Slug": "add-to-array-form-of-integer",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "993",
        "Title": "Cousins in Binary Tree",
        "Slug": "cousins-in-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "994",
        "Title": "Rotting Oranges",
        "Slug": "rotting-oranges",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "997",
        "Title": "Find the Town Judge",
        "Slug": "find-the-town-judge",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "999",
        "Title": "Available Captures for Rook",
        "Slug": "available-captures-for-rook",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1002",
        "Title": "Find Common Characters",
        "Slug": "find-common-characters",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1004",
        "Title": "Max Consecutive Ones III",
        "Slug": "max-consecutive-ones-iii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1005",
        "Title": "Maximize Sum Of Array After K Negations",
        "Slug": "maximize-sum-of-array-after-k-negations",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1009",
        "Title": "Complement of Base 10 Integer",
        "Slug": "complement-of-base-10-integer",
        "Difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1011",
        "Title": "Capacity To Ship Packages Within D Days",
        "Slug": "capacity-to-ship-packages-within-d-days",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1013",
        "Title": "Partition Array Into Three Parts With Equal Sum",
        "Slug": "partition-array-into-three-parts-with-equal-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1014",
        "Title": "Best Sightseeing Pair",
        "Slug": "best-sightseeing-pair",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1018",
        "Title": "Binary Prefix Divisible By 5",
        "Slug": "binary-prefix-divisible-by-5",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1020",
        "Title": "Number of Enclaves",
        "Slug": "number-of-enclaves",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1021",
        "Title": "Remove Outermost Parentheses",
        "Slug": "remove-outermost-parentheses",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1022",
        "Title": "Sum of Root To Leaf Binary Numbers",
        "Slug": "sum-of-root-to-leaf-binary-numbers",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1025",
        "Title": "Divisor Game",
        "Slug": "divisor-game",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Brainteaser",
            "Game Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1027",
        "Title": "Longest Arithmetic Subsequence",
        "Slug": "longest-arithmetic-subsequence",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1028",
        "Title": "Recover a Tree From Preorder Traversal",
        "Slug": "recover-a-tree-from-preorder-traversal",
        "Difficulty": "Hard",
        "Tags": [
            "String",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1030",
        "Title": "Matrix Cells in Distance Order",
        "Slug": "matrix-cells-in-distance-order",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry",
            "Sorting",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1035",
        "Title": "Uncrossed Lines",
        "Slug": "uncrossed-lines",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1037",
        "Title": "Valid Boomerang",
        "Slug": "valid-boomerang",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1046",
        "Title": "Last Stone Weight",
        "Slug": "last-stone-weight",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1047",
        "Title": "Remove All Adjacent Duplicates In String",
        "Slug": "remove-all-adjacent-duplicates-in-string",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1048",
        "Title": "Longest String Chain",
        "Slug": "longest-string-chain",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1051",
        "Title": "Height Checker",
        "Slug": "height-checker",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting",
            "Counting Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1071",
        "Title": "Greatest Common Divisor of Strings",
        "Slug": "greatest-common-divisor-of-strings",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1074",
        "Title": "Number of Submatrices That Sum to Target",
        "Slug": "number-of-submatrices-that-sum-to-target",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1078",
        "Title": "Occurrences After Bigram",
        "Slug": "occurrences-after-bigram",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1081",
        "Title": "Smallest Subsequence of Distinct Characters",
        "Slug": "smallest-subsequence-of-distinct-characters",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1089",
        "Title": "Duplicate Zeros",
        "Slug": "duplicate-zeros",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1091",
        "Title": "Shortest Path in Binary Matrix",
        "Slug": "shortest-path-in-binary-matrix",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1095",
        "Title": "Find in Mountain Array",
        "Slug": "find-in-mountain-array",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Interactive"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1103",
        "Title": "Distribute Candies to People",
        "Slug": "distribute-candies-to-people",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1108",
        "Title": "Defanging an IP Address",
        "Slug": "defanging-an-ip-address",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1122",
        "Title": "Relative Sort Array",
        "Slug": "relative-sort-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Counting Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1125",
        "Title": "Smallest Sufficient Team",
        "Slug": "smallest-sufficient-team",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Bit Manipulation",
            "Bitmask"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1128",
        "Title": "Number of Equivalent Domino Pairs",
        "Slug": "number-of-equivalent-domino-pairs",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1129",
        "Title": "Shortest Path with Alternating Colors",
        "Slug": "shortest-path-with-alternating-colors",
        "Difficulty": "Medium",
        "Tags": [
            "Breadth-First Search",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1137",
        "Title": "N-th Tribonacci Number",
        "Slug": "n-th-tribonacci-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Memoization"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1140",
        "Title": "Stone Game II",
        "Slug": "stone-game-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Prefix Sum",
            "Game Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1143",
        "Title": "Longest Common Subsequence",
        "Slug": "longest-common-subsequence",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1146",
        "Title": "Snapshot Array",
        "Slug": "snapshot-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Design"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1154",
        "Title": "Day of the Year",
        "Slug": "day-of-the-year",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1160",
        "Title": "Find Words That Can Be Formed by Characters",
        "Slug": "find-words-that-can-be-formed-by-characters",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1161",
        "Title": "Maximum Level Sum of a Binary Tree",
        "Slug": "maximum-level-sum-of-a-binary-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1162",
        "Title": "As Far from Land as Possible",
        "Slug": "as-far-from-land-as-possible",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1175",
        "Title": "Prime Arrangements",
        "Slug": "prime-arrangements",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1184",
        "Title": "Distance Between Bus Stops",
        "Slug": "distance-between-bus-stops",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1185",
        "Title": "Day of the Week",
        "Slug": "day-of-the-week",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1187",
        "Title": "Make Array Strictly Increasing",
        "Slug": "make-array-strictly-increasing",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1189",
        "Title": "Maximum Number of Balloons",
        "Slug": "maximum-number-of-balloons",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1200",
        "Title": "Minimum Absolute Difference",
        "Slug": "minimum-absolute-difference",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1201",
        "Title": "Ugly Number III",
        "Slug": "ugly-number-iii",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "Binary Search",
            "Number Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1203",
        "Title": "Sort Items by Groups Respecting Dependencies",
        "Slug": "sort-items-by-groups-respecting-dependencies",
        "Difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1207",
        "Title": "Unique Number of Occurrences",
        "Slug": "unique-number-of-occurrences",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1217",
        "Title": "Minimum Cost to Move Chips to The Same Position",
        "Slug": "minimum-cost-to-move-chips-to-the-same-position",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1218",
        "Title": "Longest Arithmetic Subsequence of Given Difference",
        "Slug": "longest-arithmetic-subsequence-of-given-difference",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1220",
        "Title": "Count Vowels Permutation",
        "Slug": "count-vowels-permutation",
        "Difficulty": "Hard",
        "Tags": [
            "Dynamic Programming"
        ],
        "Space": "O(1)",
        "Time": "O(n)",
        "Notes": ""
    },
    {
        "ID": "1221",
        "Title": "Split a String in Balanced Strings",
        "Slug": "split-a-string-in-balanced-strings",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1232",
        "Title": "Check If It Is a Straight Line",
        "Slug": "check-if-it-is-a-straight-line",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1235",
        "Title": "Maximum Profit in Job Scheduling",
        "Slug": "maximum-profit-in-job-scheduling",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1249",
        "Title": "Minimum Remove to Make Valid Parentheses",
        "Slug": "minimum-remove-to-make-valid-parentheses",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1252",
        "Title": "Cells with Odd Values in a Matrix",
        "Slug": "cells-with-odd-values-in-a-matrix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1254",
        "Title": "Number of Closed Islands",
        "Slug": "number-of-closed-islands",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1255",
        "Title": "Maximum Score Words Formed by Letters",
        "Slug": "maximum-score-words-formed-by-letters",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1260",
        "Title": "Shift 2D Grid",
        "Slug": "shift-2d-grid",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1266",
        "Title": "Minimum Time Visiting All Points",
        "Slug": "minimum-time-visiting-all-points",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1268",
        "Title": "Search Suggestions System",
        "Slug": "search-suggestions-system",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Binary Search",
            "Trie",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1269",
        "Title": "Number of Ways to Stay in the Same Place After Some Steps",
        "Slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
        "Difficulty": "Hard",
        "Tags": [
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1275",
        "Title": "Find Winner on a Tic Tac Toe Game",
        "Slug": "find-winner-on-a-tic-tac-toe-game",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1281",
        "Title": "Subtract the Product and Sum of Digits of an Integer",
        "Slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1282",
        "Title": "Group the People Given the Group Size They Belong To",
        "Slug": "group-the-people-given-the-group-size-they-belong-to",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1283",
        "Title": "Find the Smallest Divisor Given a Threshold",
        "Slug": "find-the-smallest-divisor-given-a-threshold",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1284",
        "Title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "Slug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1287",
        "Title": "Element Appearing More Than 25% In Sorted Array",
        "Slug": "element-appearing-more-than-25-in-sorted-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1290",
        "Title": "Convert Binary Number in a Linked List to Integer",
        "Slug": "convert-binary-number-in-a-linked-list-to-integer",
        "Difficulty": "Easy",
        "Tags": [
            "Linked List",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1292",
        "Title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "Slug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Matrix",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1295",
        "Title": "Find Numbers with Even Number of Digits",
        "Slug": "find-numbers-with-even-number-of-digits",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1299",
        "Title": "Replace Elements with Greatest Element on Right Side",
        "Slug": "replace-elements-with-greatest-element-on-right-side",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1300",
        "Title": "Sum of Mutated Array Closest to Target",
        "Slug": "sum-of-mutated-array-closest-to-target",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1304",
        "Title": "Find N Unique Integers Sum up to Zero",
        "Slug": "find-n-unique-integers-sum-up-to-zero",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1306",
        "Title": "Jump Game III",
        "Slug": "jump-game-iii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1309",
        "Title": "Decrypt String from Alphabet to Integer Mapping",
        "Slug": "decrypt-string-from-alphabet-to-integer-mapping",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1312",
        "Title": "Minimum Insertion Steps to Make a String Palindrome",
        "Slug": "minimum-insertion-steps-to-make-a-string-palindrome",
        "Difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1313",
        "Title": "Decompress Run-Length Encoded List",
        "Slug": "decompress-run-length-encoded-list",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1314",
        "Title": "Matrix Block Sum",
        "Slug": "matrix-block-sum",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1317",
        "Title": "Convert Integer to the Sum of Two No-Zero Integers",
        "Slug": "convert-integer-to-the-sum-of-two-no-zero-integers",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1318",
        "Title": "Minimum Flips to Make a OR b Equal to c",
        "Slug": "minimum-flips-to-make-a-or-b-equal-to-c",
        "Difficulty": "Medium",
        "Tags": [
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1319",
        "Title": "Number of Operations to Make Network Connected",
        "Slug": "number-of-operations-to-make-network-connected",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1323",
        "Title": "Maximum 69 Number",
        "Slug": "maximum-69-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1326",
        "Title": "Minimum Number of Taps to Open to Water a Garden",
        "Slug": "minimum-number-of-taps-to-open-to-water-a-garden",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1331",
        "Title": "Rank Transform of an Array",
        "Slug": "rank-transform-of-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1332",
        "Title": "Remove Palindromic Subsequences",
        "Slug": "remove-palindromic-subsequences",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1337",
        "Title": "The K Weakest Rows in a Matrix",
        "Slug": "the-k-weakest-rows-in-a-matrix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1342",
        "Title": "Number of Steps to Reduce a Number to Zero",
        "Slug": "number-of-steps-to-reduce-a-number-to-zero",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1345",
        "Title": "Jump Game IV",
        "Slug": "jump-game-iv",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1346",
        "Title": "Check If N and Its Double Exist",
        "Slug": "check-if-n-and-its-double-exist",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1351",
        "Title": "Count Negative Numbers in a Sorted Matrix",
        "Slug": "count-negative-numbers-in-a-sorted-matrix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1352",
        "Title": "Product of the Last K Numbers",
        "Slug": "product-of-the-last-k-numbers",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Design",
            "Queue",
            "Data Stream"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1356",
        "Title": "Sort Integers by The Number of 1 Bits",
        "Slug": "sort-integers-by-the-number-of-1-bits",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Sorting",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1359",
        "Title": "Count All Valid Pickup and Delivery Options",
        "Slug": "count-all-valid-pickup-and-delivery-options",
        "Difficulty": "Hard",
        "Tags": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1360",
        "Title": "Number of Days Between Two Dates",
        "Slug": "number-of-days-between-two-dates",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1361",
        "Title": "Validate Binary Tree Nodes",
        "Slug": "validate-binary-tree-nodes",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1365",
        "Title": "How Many Numbers Are Smaller Than the Current Number",
        "Slug": "how-many-numbers-are-smaller-than-the-current-number",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1367",
        "Title": "Linked List in Binary Tree",
        "Slug": "linked-list-in-binary-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1370",
        "Title": "Increasing Decreasing String",
        "Slug": "increasing-decreasing-string",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1372",
        "Title": "Longest ZigZag Path in a Binary Tree",
        "Slug": "longest-zigzag-path-in-a-binary-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1374",
        "Title": "Generate a String With Characters That Have Odd Counts",
        "Slug": "generate-a-string-with-characters-that-have-odd-counts",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1376",
        "Title": "Time Needed to Inform All Employees",
        "Slug": "time-needed-to-inform-all-employees",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1379",
        "Title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "Slug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1380",
        "Title": "Lucky Numbers in a Matrix",
        "Slug": "lucky-numbers-in-a-matrix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1383",
        "Title": "Maximum Performance of a Team",
        "Slug": "maximum-performance-of-a-team",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1385",
        "Title": "Find the Distance Value Between Two Arrays",
        "Slug": "find-the-distance-value-between-two-arrays",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1389",
        "Title": "Create Target Array in the Given Order",
        "Slug": "create-target-array-in-the-given-order",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1394",
        "Title": "Find Lucky Integer in an Array",
        "Slug": "find-lucky-integer-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1396",
        "Title": "Design Underground System",
        "Slug": "design-underground-system",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Design"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1399",
        "Title": "Count Largest Group",
        "Slug": "count-largest-group",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1402",
        "Title": "Reducing Dishes",
        "Slug": "reducing-dishes",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1403",
        "Title": "Minimum Subsequence in Non-Increasing Order",
        "Slug": "minimum-subsequence-in-non-increasing-order",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1406",
        "Title": "Stone Game III",
        "Slug": "stone-game-iii",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Game Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1408",
        "Title": "String Matching in an Array",
        "Slug": "string-matching-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String",
            "String Matching"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1413",
        "Title": "Minimum Value to Get Positive Step by Step Sum",
        "Slug": "minimum-value-to-get-positive-step-by-step-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1416",
        "Title": "Restore The Array",
        "Slug": "restore-the-array",
        "Difficulty": "Hard",
        "Tags": [
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1417",
        "Title": "Reformat The String",
        "Slug": "reformat-the-string",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1420",
        "Title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "Slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
        "Difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1422",
        "Title": "Maximum Score After Splitting a String",
        "Slug": "maximum-score-after-splitting-a-string",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1425",
        "Title": "Constrained Subsequence Sum",
        "Slug": "constrained-subsequence-sum",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Queue",
            "Sliding Window",
            "Heap (Priority Queue)",
            "Monotonic Queue"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1431",
        "Title": "Kids With the Greatest Number of Candies",
        "Slug": "kids-with-the-greatest-number-of-candies",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1436",
        "Title": "Destination City",
        "Slug": "destination-city",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1437",
        "Title": "Check If All 1's Are at Least Length K Places Away",
        "Slug": "check-if-all-1s-are-at-least-length-k-places-away",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1444",
        "Title": "Number of Ways of Cutting a Pizza",
        "Slug": "number-of-ways-of-cutting-a-pizza",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Memoization",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1446",
        "Title": "Consecutive Characters",
        "Slug": "consecutive-characters",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1448",
        "Title": "Count Good Nodes in Binary Tree",
        "Slug": "count-good-nodes-in-binary-tree",
        "Difficulty": "Medium",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1450",
        "Title": "Number of Students Doing Homework at a Given Time",
        "Slug": "number-of-students-doing-homework-at-a-given-time",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1455",
        "Title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "Slug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "String Matching"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1456",
        "Title": "Maximum Number of Vowels in a Substring of Given Length",
        "Slug": "maximum-number-of-vowels-in-a-substring-of-given-length",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1458",
        "Title": "Max Dot Product of Two Subsequences",
        "Slug": "max-dot-product-of-two-subsequences",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1460",
        "Title": "Make Two Arrays Equal by Reversing Subarrays",
        "Slug": "make-two-arrays-equal-by-reversing-subarrays",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1463",
        "Title": "Cherry Pickup II",
        "Slug": "cherry-pickup-ii",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1464",
        "Title": "Maximum Product of Two Elements in an Array",
        "Slug": "maximum-product-of-two-elements-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1466",
        "Title": "Reorder Routes to Make All Paths Lead to the City Zero",
        "Slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1470",
        "Title": "Shuffle the Array",
        "Slug": "shuffle-the-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1472",
        "Title": "Design Browser History",
        "Slug": "design-browser-history",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Linked List",
            "Stack",
            "Design",
            "Doubly-Linked List",
            "Data Stream"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1475",
        "Title": "Final Prices With a Special Discount in a Shop",
        "Slug": "final-prices-with-a-special-discount-in-a-shop",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1480",
        "Title": "Running Sum of 1d Array",
        "Slug": "running-sum-of-1d-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1482",
        "Title": "Minimum Number of Days to Make m Bouquets",
        "Slug": "minimum-number-of-days-to-make-m-bouquets",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1486",
        "Title": "XOR Operation in an Array",
        "Slug": "xor-operation-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1488",
        "Title": "Avoid Flood in The City",
        "Slug": "avoid-flood-in-the-city",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Greedy",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1489",
        "Title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "Slug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
        "Difficulty": "Hard",
        "Tags": [
            "Union Find",
            "Graph",
            "Sorting",
            "Minimum Spanning Tree",
            "Strongly Connected Component"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1491",
        "Title": "Average Salary Excluding the Minimum and Maximum Salary",
        "Slug": "average-salary-excluding-the-minimum-and-maximum-salary",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1493",
        "Title": "Longest Subarray of 1's After Deleting One Element",
        "Slug": "longest-subarray-of-1s-after-deleting-one-element",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1494",
        "Title": "Parallel Courses II",
        "Slug": "parallel-courses-ii",
        "Difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation",
            "Graph",
            "Bitmask"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1496",
        "Title": "Path Crossing",
        "Slug": "path-crossing",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1498",
        "Title": "Number of Subsequences That Satisfy the Given Sum Condition",
        "Slug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1502",
        "Title": "Can Make Arithmetic Progression From Sequence",
        "Slug": "can-make-arithmetic-progression-from-sequence",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1507",
        "Title": "Reformat Date",
        "Slug": "reformat-date",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1508",
        "Title": "Range Sum of Sorted Subarray Sums",
        "Slug": "range-sum-of-sorted-subarray-sums",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1512",
        "Title": "Number of Good Pairs",
        "Slug": "number-of-good-pairs",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1514",
        "Title": "Path with Maximum Probability",
        "Slug": "path-with-maximum-probability",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Graph",
            "Heap (Priority Queue)",
            "Shortest Path"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1518",
        "Title": "Water Bottles",
        "Slug": "water-bottles",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1523",
        "Title": "Count Odd Numbers in an Interval Range",
        "Slug": "count-odd-numbers-in-an-interval-range",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1526",
        "Title": "Minimum Number of Increments on Subarrays to Form a Target Array",
        "Slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Stack",
            "Greedy",
            "Monotonic Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1528",
        "Title": "Shuffle String",
        "Slug": "shuffle-string",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1534",
        "Title": "Count Good Triplets",
        "Slug": "count-good-triplets",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1539",
        "Title": "Kth Missing Positive Number",
        "Slug": "kth-missing-positive-number",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1544",
        "Title": "Make The String Great",
        "Slug": "make-the-string-great",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1547",
        "Title": "Minimum Cost to Cut a Stick",
        "Slug": "minimum-cost-to-cut-a-stick",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1550",
        "Title": "Three Consecutive Odds",
        "Slug": "three-consecutive-odds",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1552",
        "Title": "Magnetic Force Between Two Balls",
        "Slug": "magnetic-force-between-two-balls",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1556",
        "Title": "Thousand Separator",
        "Slug": "thousand-separator",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1557",
        "Title": "Minimum Number of Vertices to Reach All Nodes",
        "Slug": "minimum-number-of-vertices-to-reach-all-nodes",
        "Difficulty": "Medium",
        "Tags": [
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1560",
        "Title": "Most Visited Sector in  a Circular Track",
        "Slug": "most-visited-sector-in-a-circular-track",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1562",
        "Title": "Find Latest Group of Size M",
        "Slug": "find-latest-group-of-size-m",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1566",
        "Title": "Detect Pattern of Length M Repeated K or More Times",
        "Slug": "detect-pattern-of-length-m-repeated-k-or-more-times",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1567",
        "Title": "Maximum Length of Subarray With Positive Product",
        "Slug": "maximum-length-of-subarray-with-positive-product",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1569",
        "Title": "Number of Ways to Reorder Array to Get Same BST",
        "Slug": "number-of-ways-to-reorder-array-to-get-same-bst",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Divide and Conquer",
            "Dynamic Programming",
            "Tree",
            "Union Find",
            "Binary Search Tree",
            "Memoization",
            "Combinatorics",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1572",
        "Title": "Matrix Diagonal Sum",
        "Slug": "matrix-diagonal-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1574",
        "Title": "Shortest Subarray to be Removed to Make Array Sorted",
        "Slug": "shortest-subarray-to-be-removed-to-make-array-sorted",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Stack",
            "Monotonic Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1575",
        "Title": "Count All Possible Routes",
        "Slug": "count-all-possible-routes",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Memoization"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1576",
        "Title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
        "Slug": "replace-all-s-to-avoid-consecutive-repeating-characters",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1579",
        "Title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
        "Slug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
        "Difficulty": "Hard",
        "Tags": [
            "Union Find",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1582",
        "Title": "Special Positions in a Binary Matrix",
        "Slug": "special-positions-in-a-binary-matrix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1584",
        "Title": "Min Cost to Connect All Points",
        "Slug": "min-cost-to-connect-all-points",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Union Find",
            "Graph",
            "Minimum Spanning Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1588",
        "Title": "Sum of All Odd Length Subarrays",
        "Slug": "sum-of-all-odd-length-subarrays",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1592",
        "Title": "Rearrange Spaces Between Words",
        "Slug": "rearrange-spaces-between-words",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1598",
        "Title": "Crawler Log Folder",
        "Slug": "crawler-log-folder",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1601",
        "Title": "Maximum Number of Achievable Transfer Requests",
        "Slug": "maximum-number-of-achievable-transfer-requests",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Backtracking",
            "Bit Manipulation",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1603",
        "Title": "Design Parking System",
        "Slug": "design-parking-system",
        "Difficulty": "Easy",
        "Tags": [
            "Design",
            "Simulation",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1608",
        "Title": "Special Array With X Elements Greater Than or Equal X",
        "Slug": "special-array-with-x-elements-greater-than-or-equal-x",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1611",
        "Title": "Minimum One Bit Operations to Make Integers Zero",
        "Slug": "minimum-one-bit-operations-to-make-integers-zero",
        "Difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation",
            "Memoization"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1614",
        "Title": "Maximum Nesting Depth of the Parentheses",
        "Slug": "maximum-nesting-depth-of-the-parentheses",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1615",
        "Title": "Maximal Network Rank",
        "Slug": "maximal-network-rank",
        "Difficulty": "Medium",
        "Tags": [
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1617",
        "Title": "Count Subtrees With Max Distance Between Cities",
        "Slug": "count-subtrees-with-max-distance-between-cities",
        "Difficulty": "Hard",
        "Tags": [
            "Dynamic Programming",
            "Bit Manipulation",
            "Tree",
            "Enumeration",
            "Bitmask"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1619",
        "Title": "Mean of Array After Removing Some Elements",
        "Slug": "mean-of-array-after-removing-some-elements",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1624",
        "Title": "Largest Substring Between Two Equal Characters",
        "Slug": "largest-substring-between-two-equal-characters",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1629",
        "Title": "Slowest Key",
        "Slug": "slowest-key",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1630",
        "Title": "Arithmetic Subarrays",
        "Slug": "arithmetic-subarrays",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1631",
        "Title": "Path With Minimum Effort",
        "Slug": "path-with-minimum-effort",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Heap (Priority Queue)",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1636",
        "Title": "Sort Array by Increasing Frequency",
        "Slug": "sort-array-by-increasing-frequency",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1639",
        "Title": "Number of Ways to Form a Target String Given a Dictionary",
        "Slug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1640",
        "Title": "Check Array Formation Through Concatenation",
        "Slug": "check-array-formation-through-concatenation",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1646",
        "Title": "Get Maximum in Generated Array",
        "Slug": "get-maximum-in-generated-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1647",
        "Title": "Minimum Deletions to Make Character Frequencies Unique",
        "Slug": "minimum-deletions-to-make-character-frequencies-unique",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1648",
        "Title": "Sell Diminishing-Valued Colored Balls",
        "Slug": "sell-diminishing-valued-colored-balls",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Binary Search",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1652",
        "Title": "Defuse the Bomb",
        "Slug": "defuse-the-bomb",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1654",
        "Title": "Minimum Jumps to Reach Home",
        "Slug": "minimum-jumps-to-reach-home",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Breadth-First Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1656",
        "Title": "Design an Ordered Stream",
        "Slug": "design-an-ordered-stream",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Design",
            "Data Stream"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1657",
        "Title": "Determine if Two Strings Are Close",
        "Slug": "determine-if-two-strings-are-close",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1658",
        "Title": "Minimum Operations to Reduce X to Zero",
        "Slug": "minimum-operations-to-reduce-x-to-zero",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1662",
        "Title": "Check If Two String Arrays are Equivalent",
        "Slug": "check-if-two-string-arrays-are-equivalent",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1668",
        "Title": "Maximum Repeating Substring",
        "Slug": "maximum-repeating-substring",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "String Matching"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1672",
        "Title": "Richest Customer Wealth",
        "Slug": "richest-customer-wealth",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1675",
        "Title": "Minimize Deviation in Array",
        "Slug": "minimize-deviation-in-array",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1678",
        "Title": "Goal Parser Interpretation",
        "Slug": "goal-parser-interpretation",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1679",
        "Title": "Max Number of K-Sum Pairs",
        "Slug": "max-number-of-k-sum-pairs",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1684",
        "Title": "Count the Number of Consistent Strings",
        "Slug": "count-the-number-of-consistent-strings",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1688",
        "Title": "Count of Matches in Tournament",
        "Slug": "count-of-matches-in-tournament",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1694",
        "Title": "Reformat Phone Number",
        "Slug": "reformat-phone-number",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1697",
        "Title": "Checking Existence of Edge Length Limited Paths",
        "Slug": "checking-existence-of-edge-length-limited-paths",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Union Find",
            "Graph",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1700",
        "Title": "Number of Students Unable to Eat Lunch",
        "Slug": "number-of-students-unable-to-eat-lunch",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Stack",
            "Queue",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1704",
        "Title": "Determine if String Halves Are Alike",
        "Slug": "determine-if-string-halves-are-alike",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1706",
        "Title": "Where Will the Ball Fall",
        "Slug": "where-will-the-ball-fall",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Depth-First Search",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1710",
        "Title": "Maximum Units on a Truck",
        "Slug": "maximum-units-on-a-truck",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1712",
        "Title": "Ways to Split Array Into Three Subarrays",
        "Slug": "ways-to-split-array-into-three-subarrays",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1716",
        "Title": "Calculate Money in Leetcode Bank",
        "Slug": "calculate-money-in-leetcode-bank",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1720",
        "Title": "Decode XORed Array",
        "Slug": "decode-xored-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1721",
        "Title": "Swapping Nodes in a Linked List",
        "Slug": "swapping-nodes-in-a-linked-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1725",
        "Title": "Number Of Rectangles That Can Form The Largest Square",
        "Slug": "number-of-rectangles-that-can-form-the-largest-square",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1732",
        "Title": "Find the Highest Altitude",
        "Slug": "find-the-highest-altitude",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1736",
        "Title": "Latest Time by Replacing Hidden Digits",
        "Slug": "latest-time-by-replacing-hidden-digits",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1742",
        "Title": "Maximum Number of Balls in a Box",
        "Slug": "maximum-number-of-balls-in-a-box",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1748",
        "Title": "Sum of Unique Elements",
        "Slug": "sum-of-unique-elements",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1751",
        "Title": "Maximum Number of Events That Can Be Attended II",
        "Slug": "maximum-number-of-events-that-can-be-attended-ii",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1752",
        "Title": "Check if Array Is Sorted and Rotated",
        "Slug": "check-if-array-is-sorted-and-rotated",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1758",
        "Title": "Minimum Changes To Make Alternating Binary String",
        "Slug": "minimum-changes-to-make-alternating-binary-string",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1760",
        "Title": "Minimum Limit of Balls in a Bag",
        "Slug": "minimum-limit-of-balls-in-a-bag",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1763",
        "Title": "Longest Nice Substring",
        "Slug": "longest-nice-substring",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Divide and Conquer",
            "Bit Manipulation",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1768",
        "Title": "Merge Strings Alternately",
        "Slug": "merge-strings-alternately",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1773",
        "Title": "Count Items Matching a Rule",
        "Slug": "count-items-matching-a-rule",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1779",
        "Title": "Find Nearest Point That Has the Same X or Y Coordinate",
        "Slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1784",
        "Title": "Check if Binary String Has at Most One Segment of Ones",
        "Slug": "check-if-binary-string-has-at-most-one-segment-of-ones",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1790",
        "Title": "Check if One String Swap Can Make Strings Equal",
        "Slug": "check-if-one-string-swap-can-make-strings-equal",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1791",
        "Title": "Find Center of Star Graph",
        "Slug": "find-center-of-star-graph",
        "Difficulty": "Easy",
        "Tags": [
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1793",
        "Title": "Maximum Score of a Good Subarray",
        "Slug": "maximum-score-of-a-good-subarray",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Stack",
            "Monotonic Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1796",
        "Title": "Second Largest Digit in a String",
        "Slug": "second-largest-digit-in-a-string",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1797",
        "Title": "Design Authentication Manager",
        "Slug": "design-authentication-manager",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Design"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1799",
        "Title": "Maximize Score After N Operations",
        "Slug": "maximize-score-after-n-operations",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Number Theory",
            "Bitmask"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1800",
        "Title": "Maximum Ascending Subarray Sum",
        "Slug": "maximum-ascending-subarray-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1802",
        "Title": "Maximum Value at a Given Index in a Bounded Array",
        "Slug": "maximum-value-at-a-given-index-in-a-bounded-array",
        "Difficulty": "Medium",
        "Tags": [
            "Binary Search",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1805",
        "Title": "Number of Different Integers in a String",
        "Slug": "number-of-different-integers-in-a-string",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1812",
        "Title": "Determine Color of a Chessboard Square",
        "Slug": "determine-color-of-a-chessboard-square",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1816",
        "Title": "Truncate Sentence",
        "Slug": "truncate-sentence",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1818",
        "Title": "Minimum Absolute Sum Difference",
        "Slug": "minimum-absolute-sum-difference",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting",
            "Ordered Set"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1822",
        "Title": "Sign of the Product of an Array",
        "Slug": "sign-of-the-product-of-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1823",
        "Title": "Find the Winner of the Circular Game",
        "Slug": "find-the-winner-of-the-circular-game",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Recursion",
            "Queue",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1827",
        "Title": "Minimum Operations to Make the Array Increasing",
        "Slug": "minimum-operations-to-make-the-array-increasing",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1832",
        "Title": "Check if the Sentence Is Pangram",
        "Slug": "check-if-the-sentence-is-pangram",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1837",
        "Title": "Sum of Digits in Base K",
        "Slug": "sum-of-digits-in-base-k",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1838",
        "Title": "Frequency of the Most Frequent Element",
        "Slug": "frequency-of-the-most-frequent-element",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Sliding Window",
            "Sorting",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1844",
        "Title": "Replace All Digits with Characters",
        "Slug": "replace-all-digits-with-characters",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1845",
        "Title": "Seat Reservation Manager",
        "Slug": "seat-reservation-manager",
        "Difficulty": "Medium",
        "Tags": [
            "Design",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1848",
        "Title": "Minimum Distance to the Target Element",
        "Slug": "minimum-distance-to-the-target-element",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1854",
        "Title": "Maximum Population Year",
        "Slug": "maximum-population-year",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1855",
        "Title": "Maximum Distance Between a Pair of Values",
        "Slug": "maximum-distance-between-a-pair-of-values",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1857",
        "Title": "Largest Color Value in a Directed Graph",
        "Slug": "largest-color-value-in-a-directed-graph",
        "Difficulty": "Hard",
        "Tags": [
            "Hash Table",
            "Dynamic Programming",
            "Graph",
            "Topological Sort",
            "Memoization",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1859",
        "Title": "Sorting the Sentence",
        "Slug": "sorting-the-sentence",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1863",
        "Title": "Sum of All Subset XOR Totals",
        "Slug": "sum-of-all-subset-xor-totals",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Backtracking",
            "Bit Manipulation",
            "Combinatorics"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1869",
        "Title": "Longer Contiguous Segments of Ones than Zeros",
        "Slug": "longer-contiguous-segments-of-ones-than-zeros",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1870",
        "Title": "Minimum Speed to Arrive on Time",
        "Slug": "minimum-speed-to-arrive-on-time",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1876",
        "Title": "Substrings of Size Three with Distinct Characters",
        "Slug": "substrings-of-size-three-with-distinct-characters",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Sliding Window",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1880",
        "Title": "Check if Word Equals Summation of Two Words",
        "Slug": "check-if-word-equals-summation-of-two-words",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1886",
        "Title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "Slug": "determine-whether-matrix-can-be-obtained-by-rotation",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1893",
        "Title": "Check if All the Integers in a Range Are Covered",
        "Slug": "check-if-all-the-integers-in-a-range-are-covered",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1894",
        "Title": "Find the Student that Will Replace the Chalk",
        "Slug": "find-the-student-that-will-replace-the-chalk",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Simulation",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1897",
        "Title": "Redistribute Characters to Make All Strings Equal",
        "Slug": "redistribute-characters-to-make-all-strings-equal",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1898",
        "Title": "Maximum Number of Removable Characters",
        "Slug": "maximum-number-of-removable-characters",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "String",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1901",
        "Title": "Find a Peak Element II",
        "Slug": "find-a-peak-element-ii",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1903",
        "Title": "Largest Odd Number in String",
        "Slug": "largest-odd-number-in-string",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1905",
        "Title": "Count Sub Islands",
        "Slug": "count-sub-islands",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1909",
        "Title": "Remove One Element to Make the Array Strictly Increasing",
        "Slug": "remove-one-element-to-make-the-array-strictly-increasing",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1913",
        "Title": "Maximum Product Difference Between Two Pairs",
        "Slug": "maximum-product-difference-between-two-pairs",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1920",
        "Title": "Build Array from Permutation",
        "Slug": "build-array-from-permutation",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1925",
        "Title": "Count Square Sum Triples",
        "Slug": "count-square-sum-triples",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1926",
        "Title": "Nearest Exit from Entrance in Maze",
        "Slug": "nearest-exit-from-entrance-in-maze",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1929",
        "Title": "Concatenation of Array",
        "Slug": "concatenation-of-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1935",
        "Title": "Maximum Number of Words You Can Type",
        "Slug": "maximum-number-of-words-you-can-type",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1941",
        "Title": "Check if All Characters Have Equal Number of Occurrences",
        "Slug": "check-if-all-characters-have-equal-number-of-occurrences",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1944",
        "Title": "Number of Visible People in a Queue",
        "Slug": "number-of-visible-people-in-a-queue",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1945",
        "Title": "Sum of Digits of String After Convert",
        "Slug": "sum-of-digits-of-string-after-convert",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1952",
        "Title": "Three Divisors",
        "Slug": "three-divisors",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1957",
        "Title": "Delete Characters to Make Fancy String",
        "Slug": "delete-characters-to-make-fancy-string",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1961",
        "Title": "Check If String Is a Prefix of Array",
        "Slug": "check-if-string-is-a-prefix-of-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1964",
        "Title": "Find the Longest Valid Obstacle Course at Each Position",
        "Slug": "find-the-longest-valid-obstacle-course-at-each-position",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Binary Indexed Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1967",
        "Title": "Number of Strings That Appear as Substrings in Word",
        "Slug": "number-of-strings-that-appear-as-substrings-in-word",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1970",
        "Title": "Last Day Where You Can Still Cross",
        "Slug": "last-day-where-you-can-still-cross",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1971",
        "Title": "Find if Path Exists in Graph",
        "Slug": "find-if-path-exists-in-graph",
        "Difficulty": "Easy",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1974",
        "Title": "Minimum Time to Type Word Using Special Typewriter",
        "Slug": "minimum-time-to-type-word-using-special-typewriter",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1979",
        "Title": "Find Greatest Common Divisor of Array",
        "Slug": "find-greatest-common-divisor-of-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1984",
        "Title": "Minimum Difference Between Highest and Lowest of K Scores",
        "Slug": "minimum-difference-between-highest-and-lowest-of-k-scores",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sliding Window",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1991",
        "Title": "Find the Middle Index in Array",
        "Slug": "find-the-middle-index-in-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "1995",
        "Title": "Count Special Quadruplets",
        "Slug": "count-special-quadruplets",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2000",
        "Title": "Reverse Prefix of Word",
        "Slug": "reverse-prefix-of-word",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2006",
        "Title": "Count Number of Pairs With Absolute Difference K",
        "Slug": "count-number-of-pairs-with-absolute-difference-k",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2009",
        "Title": "Minimum Number of Operations to Make Array Continuous",
        "Slug": "minimum-number-of-operations-to-make-array-continuous",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2011",
        "Title": "Final Value of Variable After Performing Operations",
        "Slug": "final-value-of-variable-after-performing-operations",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2016",
        "Title": "Maximum Difference Between Increasing Elements",
        "Slug": "maximum-difference-between-increasing-elements",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2022",
        "Title": "Convert 1D Array Into 2D Array",
        "Slug": "convert-1d-array-into-2d-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2024",
        "Title": "Maximize the Confusion of an Exam",
        "Slug": "maximize-the-confusion-of-an-exam",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2027",
        "Title": "Minimum Moves to Convert String",
        "Slug": "minimum-moves-to-convert-string",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2032",
        "Title": "Two Out of Three",
        "Slug": "two-out-of-three",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2037",
        "Title": "Minimum Number of Moves to Seat Everyone",
        "Slug": "minimum-number-of-moves-to-seat-everyone",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2038",
        "Title": "Remove Colored Pieces if Both Neighbors are the Same Color",
        "Slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
        "Difficulty": "Medium",
        "Tags": [
            "Math",
            "String",
            "Greedy",
            "Game Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2042",
        "Title": "Check if Numbers Are Ascending in a Sentence",
        "Slug": "check-if-numbers-are-ascending-in-a-sentence",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2047",
        "Title": "Number of Valid Words in a Sentence",
        "Slug": "number-of-valid-words-in-a-sentence",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2050",
        "Title": "Parallel Courses III",
        "Slug": "parallel-courses-iii",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Graph",
            "Topological Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2053",
        "Title": "Kth Distinct String in an Array",
        "Slug": "kth-distinct-string-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2057",
        "Title": "Smallest Index With Equal Value",
        "Slug": "smallest-index-with-equal-value",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2058",
        "Title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "Slug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2062",
        "Title": "Count Vowel Substrings of a String",
        "Slug": "count-vowel-substrings-of-a-string",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2068",
        "Title": "Check Whether Two Strings are Almost Equivalent",
        "Slug": "check-whether-two-strings-are-almost-equivalent",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2073",
        "Title": "Time Needed to Buy Tickets",
        "Slug": "time-needed-to-buy-tickets",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Queue",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2078",
        "Title": "Two Furthest Houses With Different Colors",
        "Slug": "two-furthest-houses-with-different-colors",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2085",
        "Title": "Count Common Words With One Occurrence",
        "Slug": "count-common-words-with-one-occurrence",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2089",
        "Title": "Find Target Indices After Sorting Array",
        "Slug": "find-target-indices-after-sorting-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2090",
        "Title": "K Radius Subarray Averages",
        "Slug": "k-radius-subarray-averages",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2094",
        "Title": "Finding 3-Digit Even Numbers",
        "Slug": "finding-3-digit-even-numbers",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2095",
        "Title": "Delete the Middle Node of a Linked List",
        "Slug": "delete-the-middle-node-of-a-linked-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2099",
        "Title": "Find Subsequence of Length K With the Largest Sum",
        "Slug": "find-subsequence-of-length-k-with-the-largest-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2101",
        "Title": "Detonate the Maximum Bombs",
        "Slug": "detonate-the-maximum-bombs",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Geometry"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2102",
        "Title": "Sequentially Ordinal Rank Tracker",
        "Slug": "sequentially-ordinal-rank-tracker",
        "Difficulty": "Hard",
        "Tags": [
            "Design",
            "Heap (Priority Queue)",
            "Data Stream",
            "Ordered Set"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2103",
        "Title": "Rings and Rods",
        "Slug": "rings-and-rods",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2108",
        "Title": "Find First Palindromic String in the Array",
        "Slug": "find-first-palindromic-string-in-the-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2114",
        "Title": "Maximum Number of Words Found in Sentences",
        "Slug": "maximum-number-of-words-found-in-sentences",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2119",
        "Title": "A Number After a Double Reversal",
        "Slug": "a-number-after-a-double-reversal",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2124",
        "Title": "Check if All A's Appears Before All B's",
        "Slug": "check-if-all-as-appears-before-all-bs",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2129",
        "Title": "Capitalize the Title",
        "Slug": "capitalize-the-title",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2130",
        "Title": "Maximum Twin Sum of a Linked List",
        "Slug": "maximum-twin-sum-of-a-linked-list",
        "Difficulty": "Medium",
        "Tags": [
            "Linked List",
            "Two Pointers",
            "Stack"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2131",
        "Title": "Longest Palindrome by Concatenating Two Letter Words",
        "Slug": "longest-palindrome-by-concatenating-two-letter-words",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Greedy",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2133",
        "Title": "Check if Every Row and Column Contains All Numbers",
        "Slug": "check-if-every-row-and-column-contains-all-numbers",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2136",
        "Title": "Earliest Possible Day of Full Bloom",
        "Slug": "earliest-possible-day-of-full-bloom",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2138",
        "Title": "Divide a String Into Groups of Size k",
        "Slug": "divide-a-string-into-groups-of-size-k",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2140",
        "Title": "Solving Questions With Brainpower",
        "Slug": "solving-questions-with-brainpower",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2141",
        "Title": "Maximum Running Time of N Computers",
        "Slug": "maximum-running-time-of-n-computers",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2144",
        "Title": "Minimum Cost of Buying Candies With Discount",
        "Slug": "minimum-cost-of-buying-candies-with-discount",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2148",
        "Title": "Count Elements With Strictly Smaller and Greater Elements ",
        "Slug": "count-elements-with-strictly-smaller-and-greater-elements",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2150",
        "Title": "Find All Lonely Numbers in the Array",
        "Slug": "find-all-lonely-numbers-in-the-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2154",
        "Title": "Keep Multiplying Found Values by Two",
        "Slug": "keep-multiplying-found-values-by-two",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2160",
        "Title": "Minimum Sum of Four Digit Number After Splitting Digits",
        "Slug": "minimum-sum-of-four-digit-number-after-splitting-digits",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2164",
        "Title": "Sort Even and Odd Indices Independently",
        "Slug": "sort-even-and-odd-indices-independently",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2169",
        "Title": "Count Operations to Obtain Zero",
        "Slug": "count-operations-to-obtain-zero",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2176",
        "Title": "Count Equal and Divisible Pairs in an Array",
        "Slug": "count-equal-and-divisible-pairs-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2180",
        "Title": "Count Integers With Even Digit Sum",
        "Slug": "count-integers-with-even-digit-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2185",
        "Title": "Counting Words With a Given Prefix",
        "Slug": "counting-words-with-a-given-prefix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2187",
        "Title": "Minimum Time to Complete Trips",
        "Slug": "minimum-time-to-complete-trips",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2190",
        "Title": "Most Frequent Number Following Key In an Array",
        "Slug": "most-frequent-number-following-key-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2194",
        "Title": "Cells in a Range on an Excel Sheet",
        "Slug": "cells-in-a-range-on-an-excel-sheet",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2196",
        "Title": "Create Binary Tree From Descriptions",
        "Slug": "create-binary-tree-from-descriptions",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2200",
        "Title": "Find All K-Distant Indices in an Array",
        "Slug": "find-all-k-distant-indices-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2206",
        "Title": "Divide Array Into Equal Pairs",
        "Slug": "divide-array-into-equal-pairs",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Bit Manipulation",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2210",
        "Title": "Count Hills and Valleys in an Array",
        "Slug": "count-hills-and-valleys-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2215",
        "Title": "Find the Difference of Two Arrays",
        "Slug": "find-the-difference-of-two-arrays",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2218",
        "Title": "Maximum Value of K Coins From Piles",
        "Slug": "maximum-value-of-k-coins-from-piles",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2220",
        "Title": "Minimum Bit Flips to Convert Number",
        "Slug": "minimum-bit-flips-to-convert-number",
        "Difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2224",
        "Title": "Minimum Number of Operations to Convert Time",
        "Slug": "minimum-number-of-operations-to-convert-time",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2231",
        "Title": "Largest Number After Digit Swaps by Parity",
        "Slug": "largest-number-after-digit-swaps-by-parity",
        "Difficulty": "Easy",
        "Tags": [
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2235",
        "Title": "Add Two Integers",
        "Slug": "add-two-integers",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2236",
        "Title": "Root Equals Sum of Children",
        "Slug": "root-equals-sum-of-children",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2239",
        "Title": "Find Closest Number to Zero",
        "Slug": "find-closest-number-to-zero",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2243",
        "Title": "Calculate Digit Sum of a String",
        "Slug": "calculate-digit-sum-of-a-string",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2246",
        "Title": "Longest Path With Different Adjacent Characters",
        "Slug": "longest-path-with-different-adjacent-characters",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "String",
            "Tree",
            "Depth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2248",
        "Title": "Intersection of Multiple Arrays",
        "Slug": "intersection-of-multiple-arrays",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2251",
        "Title": "Number of Flowers in Full Bloom",
        "Slug": "number-of-flowers-in-full-bloom",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Sorting",
            "Prefix Sum",
            "Ordered Set"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2255",
        "Title": "Count Prefixes of a Given String",
        "Slug": "count-prefixes-of-a-given-string",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2259",
        "Title": "Remove Digit From Number to Maximize Result",
        "Slug": "remove-digit-from-number-to-maximize-result",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Greedy",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2264",
        "Title": "Largest 3-Same-Digit Number in String",
        "Slug": "largest-3-same-digit-number-in-string",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2269",
        "Title": "Find the K-Beauty of a Number",
        "Slug": "find-the-k-beauty-of-a-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2272",
        "Title": "Substring With Largest Variance",
        "Slug": "substring-with-largest-variance",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2273",
        "Title": "Find Resultant Array After Removing Anagrams",
        "Slug": "find-resultant-array-after-removing-anagrams",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2278",
        "Title": "Percentage of Letter in String",
        "Slug": "percentage-of-letter-in-string",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2283",
        "Title": "Check if Number Has Equal Digit Count and Digit Value",
        "Slug": "check-if-number-has-equal-digit-count-and-digit-value",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2287",
        "Title": "Rearrange Characters to Make Target String",
        "Slug": "rearrange-characters-to-make-target-string",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2293",
        "Title": "Min Max Game",
        "Slug": "min-max-game",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2299",
        "Title": "Strong Password Checker II",
        "Slug": "strong-password-checker-ii",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2300",
        "Title": "Successful Pairs of Spells and Potions",
        "Slug": "successful-pairs-of-spells-and-potions",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2303",
        "Title": "Calculate Amount Paid in Taxes",
        "Slug": "calculate-amount-paid-in-taxes",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2305",
        "Title": "Fair Distribution of Cookies",
        "Slug": "fair-distribution-of-cookies",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking",
            "Bit Manipulation",
            "Bitmask"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2309",
        "Title": "Greatest English Letter in Upper and Lower Case",
        "Slug": "greatest-english-letter-in-upper-and-lower-case",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2315",
        "Title": "Count Asterisks",
        "Slug": "count-asterisks",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2316",
        "Title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
        "Slug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2319",
        "Title": "Check if Matrix Is X-Matrix",
        "Slug": "check-if-matrix-is-x-matrix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2325",
        "Title": "Decode the Message",
        "Slug": "decode-the-message",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2328",
        "Title": "Number of Increasing Paths in a Grid",
        "Slug": "number-of-increasing-paths-in-a-grid",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort",
            "Memoization",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2331",
        "Title": "Evaluate Boolean Binary Tree",
        "Slug": "evaluate-boolean-binary-tree",
        "Difficulty": "Easy",
        "Tags": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2335",
        "Title": "Minimum Amount of Time to Fill Cups",
        "Slug": "minimum-amount-of-time-to-fill-cups",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2336",
        "Title": "Smallest Number in Infinite Set",
        "Slug": "smallest-number-in-infinite-set",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "Design",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2341",
        "Title": "Maximum Number of Pairs in Array",
        "Slug": "maximum-number-of-pairs-in-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2347",
        "Title": "Best Poker Hand",
        "Slug": "best-poker-hand",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2348",
        "Title": "Number of Zero-Filled Subarrays",
        "Slug": "number-of-zero-filled-subarrays",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2350",
        "Title": "Shortest Impossible Sequence of Rolls",
        "Slug": "shortest-impossible-sequence-of-rolls",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2351",
        "Title": "First Letter to Appear Twice",
        "Slug": "first-letter-to-appear-twice",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2352",
        "Title": "Equal Row and Column Pairs",
        "Slug": "equal-row-and-column-pairs",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2357",
        "Title": "Make Array Zero by Subtracting Equal Amounts",
        "Slug": "make-array-zero-by-subtracting-equal-amounts",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2360",
        "Title": "Longest Cycle in a Graph",
        "Slug": "longest-cycle-in-a-graph",
        "Difficulty": "Hard",
        "Tags": [
            "Depth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2363",
        "Title": "Merge Similar Items",
        "Slug": "merge-similar-items",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting",
            "Ordered Set"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2366",
        "Title": "Minimum Replacements to Sort the Array",
        "Slug": "minimum-replacements-to-sort-the-array",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Math",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2367",
        "Title": "Number of Arithmetic Triplets",
        "Slug": "number-of-arithmetic-triplets",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2369",
        "Title": "Check if There is a Valid Partition For The Array",
        "Slug": "check-if-there-is-a-valid-partition-for-the-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2370",
        "Title": "Longest Ideal Subsequence",
        "Slug": "longest-ideal-subsequence",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2373",
        "Title": "Largest Local Values in a Matrix",
        "Slug": "largest-local-values-in-a-matrix",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2379",
        "Title": "Minimum Recolors to Get K Consecutive Black Blocks",
        "Slug": "minimum-recolors-to-get-k-consecutive-black-blocks",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2383",
        "Title": "Minimum Hours of Training to Win a Competition",
        "Slug": "minimum-hours-of-training-to-win-a-competition",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2389",
        "Title": "Longest Subsequence With Limited Sum",
        "Slug": "longest-subsequence-with-limited-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Sorting",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2390",
        "Title": "Removing Stars From a String",
        "Slug": "removing-stars-from-a-string",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Stack",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2395",
        "Title": "Find Subarrays With Equal Sum",
        "Slug": "find-subarrays-with-equal-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2399",
        "Title": "Check Distances Between Same Letters",
        "Slug": "check-distances-between-same-letters",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2404",
        "Title": "Most Frequent Even Element",
        "Slug": "most-frequent-even-element",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2405",
        "Title": "Optimal Partition of String",
        "Slug": "optimal-partition-of-string",
        "Difficulty": "Medium",
        "Tags": [
            "Hash Table",
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2409",
        "Title": "Count Days Spent Together",
        "Slug": "count-days-spent-together",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2413",
        "Title": "Smallest Even Multiple",
        "Slug": "smallest-even-multiple",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Number Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2418",
        "Title": "Sort the People",
        "Slug": "sort-the-people",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2423",
        "Title": "Remove Letter To Equalize Frequency",
        "Slug": "remove-letter-to-equalize-frequency",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2425",
        "Title": "Bitwise XOR of All Pairings",
        "Slug": "bitwise-xor-of-all-pairings",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Bit Manipulation",
            "Brainteaser"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2427",
        "Title": "Number of Common Factors",
        "Slug": "number-of-common-factors",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Enumeration",
            "Number Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2432",
        "Title": "The Employee That Worked on the Longest Task",
        "Slug": "the-employee-that-worked-on-the-longest-task",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2437",
        "Title": "Number of Valid Clock Times",
        "Slug": "number-of-valid-clock-times",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2439",
        "Title": "Minimize Maximum of Array",
        "Slug": "minimize-maximum-of-array",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Dynamic Programming",
            "Greedy",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2441",
        "Title": "Largest Positive Integer That Exists With Its Negative",
        "Slug": "largest-positive-integer-that-exists-with-its-negative",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2444",
        "Title": "Count Subarrays With Fixed Bounds",
        "Slug": "count-subarrays-with-fixed-bounds",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Queue",
            "Sliding Window",
            "Monotonic Queue"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2446",
        "Title": "Determine if Two Events Have Conflict",
        "Slug": "determine-if-two-events-have-conflict",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2448",
        "Title": "Minimum Cost to Make Array Equal",
        "Slug": "minimum-cost-to-make-array-equal",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy",
            "Sorting",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2451",
        "Title": "Odd String Difference",
        "Slug": "odd-string-difference",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2455",
        "Title": "Average Value of Even Numbers That Are Divisible by Three",
        "Slug": "average-value-of-even-numbers-that-are-divisible-by-three",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2460",
        "Title": "Apply Operations to an Array",
        "Slug": "apply-operations-to-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2462",
        "Title": "Total Cost to Hire K Workers",
        "Slug": "total-cost-to-hire-k-workers",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2465",
        "Title": "Number of Distinct Averages",
        "Slug": "number-of-distinct-averages",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2466",
        "Title": "Count Ways To Build Good Strings",
        "Slug": "count-ways-to-build-good-strings",
        "Difficulty": "Medium",
        "Tags": [
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2469",
        "Title": "Convert the Temperature",
        "Slug": "convert-the-temperature",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2475",
        "Title": "Number of Unequal Triplets in Array",
        "Slug": "number-of-unequal-triplets-in-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2481",
        "Title": "Minimum Cuts to Divide a Circle",
        "Slug": "minimum-cuts-to-divide-a-circle",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Geometry"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2483",
        "Title": "Minimum Penalty for a Shop",
        "Slug": "minimum-penalty-for-a-shop",
        "Difficulty": "Medium",
        "Tags": [
            "String",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2485",
        "Title": "Find the Pivot Integer",
        "Slug": "find-the-pivot-integer",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2490",
        "Title": "Circular Sentence",
        "Slug": "circular-sentence",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2492",
        "Title": "Minimum Score of a Path Between Two Cities",
        "Slug": "minimum-score-of-a-path-between-two-cities",
        "Difficulty": "Medium",
        "Tags": [
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Graph"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2496",
        "Title": "Maximum Value of a String in an Array",
        "Slug": "maximum-value-of-a-string-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2500",
        "Title": "Delete Greatest Value in Each Row",
        "Slug": "delete-greatest-value-in-each-row",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting",
            "Heap (Priority Queue)",
            "Matrix",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2506",
        "Title": "Count Pairs Of Similar Strings",
        "Slug": "count-pairs-of-similar-strings",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2511",
        "Title": "Maximum Enemy Forts That Can Be Captured",
        "Slug": "maximum-enemy-forts-that-can-be-captured",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2515",
        "Title": "Shortest Distance to Target String in a Circular Array",
        "Slug": "shortest-distance-to-target-string-in-a-circular-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2520",
        "Title": "Count the Digits That Divide a Number",
        "Slug": "count-the-digits-that-divide-a-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2525",
        "Title": "Categorize Box According to Criteria",
        "Slug": "categorize-box-according-to-criteria",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2529",
        "Title": "Maximum Count of Positive Integer and Negative Integer",
        "Slug": "maximum-count-of-positive-integer-and-negative-integer",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Binary Search",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2535",
        "Title": "Difference Between Element Sum and Digit Sum of an Array",
        "Slug": "difference-between-element-sum-and-digit-sum-of-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2536",
        "Title": "Increment Submatrices by One",
        "Slug": "increment-submatrices-by-one",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Matrix",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2540",
        "Title": "Minimum Common Value",
        "Slug": "minimum-common-value",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers",
            "Binary Search"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2542",
        "Title": "Maximum Subsequence Score",
        "Slug": "maximum-subsequence-score",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2544",
        "Title": "Alternating Digit Sum",
        "Slug": "alternating-digit-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2549",
        "Title": "Count Distinct Numbers on Board",
        "Slug": "count-distinct-numbers-on-board",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Math",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2551",
        "Title": "Put Marbles in Bags",
        "Slug": "put-marbles-in-bags",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Greedy",
            "Sorting",
            "Heap (Priority Queue)"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2553",
        "Title": "Separate the Digits in an Array",
        "Slug": "separate-the-digits-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2558",
        "Title": "Take Gifts From the Richest Pile",
        "Slug": "take-gifts-from-the-richest-pile",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Heap (Priority Queue)",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2562",
        "Title": "Find the Array Concatenation Value",
        "Slug": "find-the-array-concatenation-value",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2566",
        "Title": "Maximum Difference by Remapping a Digit",
        "Slug": "maximum-difference-by-remapping-a-digit",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2570",
        "Title": "Merge Two 2D Arrays by Summing Values",
        "Slug": "merge-two-2d-arrays-by-summing-values",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Two Pointers"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2574",
        "Title": "Left and Right Sum Differences",
        "Slug": "left-and-right-sum-differences",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2575",
        "Title": "Find the Divisibility Array of a String",
        "Slug": "find-the-divisibility-array-of-a-string",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Math",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2576",
        "Title": "Find the Maximum Number of Marked Indices",
        "Slug": "find-the-maximum-number-of-marked-indices",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Two Pointers",
            "Binary Search",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2577",
        "Title": "Minimum Time to Visit a Cell In a Grid",
        "Slug": "minimum-time-to-visit-a-cell-in-a-grid",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Breadth-First Search",
            "Graph",
            "Heap (Priority Queue)",
            "Matrix",
            "Shortest Path"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2578",
        "Title": "Split With Minimum Sum",
        "Slug": "split-with-minimum-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2582",
        "Title": "Pass the Pillow",
        "Slug": "pass-the-pillow",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2586",
        "Title": "Count the Number of Vowel Strings in Range",
        "Slug": "count-the-number-of-vowel-strings-in-range",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2591",
        "Title": "Distribute Money to Maximum Children",
        "Slug": "distribute-money-to-maximum-children",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2595",
        "Title": "Number of Even and Odd Bits",
        "Slug": "number-of-even-and-odd-bits",
        "Difficulty": "Easy",
        "Tags": [
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2600",
        "Title": "K Items With the Maximum Sum",
        "Slug": "k-items-with-the-maximum-sum",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2605",
        "Title": "Form Smallest Number From Two Digit Arrays",
        "Slug": "form-smallest-number-from-two-digit-arrays",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2609",
        "Title": "Find the Longest Balanced Substring of a Binary String",
        "Slug": "find-the-longest-balanced-substring-of-a-binary-string",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2614",
        "Title": "Prime In Diagonal",
        "Slug": "prime-in-diagonal",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Matrix",
            "Number Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2616",
        "Title": "Minimize the Maximum Difference of Pairs",
        "Slug": "minimize-the-maximum-difference-of-pairs",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Binary Search",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2639",
        "Title": "Find the Width of Columns of a Grid",
        "Slug": "find-the-width-of-columns-of-a-grid",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2643",
        "Title": "Row With Maximum Ones",
        "Slug": "row-with-maximum-ones",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Matrix"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2644",
        "Title": "Find the Maximum Divisibility Score",
        "Slug": "find-the-maximum-divisibility-score",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2651",
        "Title": "Calculate Delayed Arrival Time",
        "Slug": "calculate-delayed-arrival-time",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2652",
        "Title": "Sum Multiples",
        "Slug": "sum-multiples",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2656",
        "Title": "Maximum Sum With Exactly K Elements ",
        "Slug": "maximum-sum-with-exactly-k-elements",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2660",
        "Title": "Determine the Winner of a Bowling Game",
        "Slug": "determine-the-winner-of-a-bowling-game",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2670",
        "Title": "Find the Distinct Difference Array",
        "Slug": "find-the-distinct-difference-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2678",
        "Title": "Number of Senior Citizens",
        "Slug": "number-of-senior-citizens",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2682",
        "Title": "Find the Losers of the Circular Game",
        "Slug": "find-the-losers-of-the-circular-game",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2696",
        "Title": "Minimum String Length After Removing Substrings",
        "Slug": "minimum-string-length-after-removing-substrings",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Stack",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2697",
        "Title": "Lexicographically Smallest Palindrome",
        "Slug": "lexicographically-smallest-palindrome",
        "Difficulty": "Easy",
        "Tags": [
            "Two Pointers",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2706",
        "Title": "Buy Two Chocolates",
        "Slug": "buy-two-chocolates",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2707",
        "Title": "Extra Characters in a String",
        "Slug": "extra-characters-in-a-string",
        "Difficulty": "Medium",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Dynamic Programming",
            "Trie"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2710",
        "Title": "Remove Trailing Zeros From a String",
        "Slug": "remove-trailing-zeros-from-a-string",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2716",
        "Title": "Minimize String Length",
        "Slug": "minimize-string-length",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2717",
        "Title": "Semi-Ordered Permutation",
        "Slug": "semi-ordered-permutation",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2729",
        "Title": "Check if The Number is Fascinating",
        "Slug": "check-if-the-number-is-fascinating",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2733",
        "Title": "Neither Minimum nor Maximum",
        "Slug": "neither-minimum-nor-maximum",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2739",
        "Title": "Total Distance Traveled",
        "Slug": "total-distance-traveled",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2742",
        "Title": "Painting the Walls",
        "Slug": "painting-the-walls",
        "Difficulty": "Hard",
        "Tags": [
            "Array",
            "Dynamic Programming"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2744",
        "Title": "Find Maximum Number of String Pairs",
        "Slug": "find-maximum-number-of-string-pairs",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "String",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2748",
        "Title": "Number of Beautiful Pairs",
        "Slug": "number-of-beautiful-pairs",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Math",
            "Number Theory"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2760",
        "Title": "Longest Even Odd Subarray With Threshold",
        "Slug": "longest-even-odd-subarray-with-threshold",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Sliding Window"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2765",
        "Title": "Longest Alternating Subarray",
        "Slug": "longest-alternating-subarray",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2769",
        "Title": "Find the Maximum Achievable Number",
        "Slug": "find-the-maximum-achievable-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2778",
        "Title": "Sum of Squares of Special Elements ",
        "Slug": "sum-of-squares-of-special-elements",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2784",
        "Title": "Check if Array is Good",
        "Slug": "check-if-array-is-good",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2788",
        "Title": "Split Strings by Separator",
        "Slug": "split-strings-by-separator",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2798",
        "Title": "Number of Employees Who Met the Target",
        "Slug": "number-of-employees-who-met-the-target",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2806",
        "Title": "Account Balance After Rounded Purchase",
        "Slug": "account-balance-after-rounded-purchase",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2810",
        "Title": "Faulty Keyboard",
        "Slug": "faulty-keyboard",
        "Difficulty": "Easy",
        "Tags": [
            "String",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2815",
        "Title": "Max Pair Sum in an Array",
        "Slug": "max-pair-sum-in-an-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2824",
        "Title": "Count Pairs Whose Sum is Less than Target",
        "Slug": "count-pairs-whose-sum-is-less-than-target",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2828",
        "Title": "Check if a String Is an Acronym of Words",
        "Slug": "check-if-a-string-is-an-acronym-of-words",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2833",
        "Title": "Furthest Point From Origin",
        "Slug": "furthest-point-from-origin",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Counting"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2839",
        "Title": "Check if Strings Can be Made Equal With Operations I",
        "Slug": "check-if-strings-can-be-made-equal-with-operations-i",
        "Difficulty": "Easy",
        "Tags": [
            "String"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2843",
        "Title": "  Count Symmetric Integers",
        "Slug": "count-symmetric-integers",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "Enumeration"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2848",
        "Title": "Points That Intersect With Cars",
        "Slug": "points-that-intersect-with-cars",
        "Difficulty": "Easy",
        "Tags": [
            "Hash Table",
            "Math",
            "Prefix Sum"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2855",
        "Title": "Minimum Right Shifts to Sort the Array",
        "Slug": "minimum-right-shifts-to-sort-the-array",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2859",
        "Title": "Sum of Values at Indices With K Set Bits",
        "Slug": "sum-of-values-at-indices-with-k-set-bits",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Bit Manipulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2864",
        "Title": "Maximum Odd Binary Number",
        "Slug": "maximum-odd-binary-number",
        "Difficulty": "Easy",
        "Tags": [
            "Math",
            "String",
            "Greedy"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2869",
        "Title": "Minimum Operations to Collect Elements",
        "Slug": "minimum-operations-to-collect-elements",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "Hash Table"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2873",
        "Title": "Maximum Value of an Ordered Triplet I",
        "Slug": "maximum-value-of-an-ordered-triplet-i",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2894",
        "Title": "Divisible and Non-divisible Sums Difference",
        "Slug": "divisible-and-non-divisible-sums-difference",
        "Difficulty": "Easy",
        "Tags": [
            "Math"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2899",
        "Title": "Last Visited Integers",
        "Slug": "last-visited-integers",
        "Difficulty": "Easy",
        "Tags": [
            "Array",
            "String",
            "Simulation"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2903",
        "Title": "Find Indices With Index and Value Difference I",
        "Slug": "find-indices-with-index-and-value-difference-i",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    },
    {
        "ID": "2908",
        "Title": "Minimum Sum of Mountain Triplets I",
        "Slug": "minimum-sum-of-mountain-triplets-i",
        "Difficulty": "Easy",
        "Tags": [
            "Array"
        ],
        "Space": "",
        "Time": "",
        "Notes": ""
    }
]